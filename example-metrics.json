{
    "experiment1_summarization": [
        {
            "name": "quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\quality_time_notifier.py)",
            "summary": "\nThe code is a notifier that uses asyncio to send notifications indefinitely. It sets the log level and sleep duration, and then runs the notify function using a database connection.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\measurements.py)",
            "summary": "\nThis code is used for collecting recent measurements for specified metrics, without entities and issue status. It uses pymongo to connect to a database and retrieve the necessary data. The function `get_recent_measurements` takes in a database, a list of metrics, and a limit for the number of measurements per metric, and returns a list of measurements. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\reports.py)",
            "summary": "\nThe code delineated by the triple backticks is a function that retrieves reports and measurements from a database. It imports necessary modules and defines the function, including type annotations. It also includes a conditional statement for type checking and imports additional modules if necessary. The function returns a tuple of lists containing reports and measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "ms_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\destinations\\ms_teams.py)",
            "summary": "\nThis code creates a notification and sends it to Microsoft Teams using a webhook. It formats the contents of the notification and includes information about changed metrics and their values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\metric_notification_data.py)",
            "summary": "\nThis code is used to handle metric data needed for notifications. It imports necessary modules and defines constants. It also includes a class for MetricNotificationData and a method for getting user-friendly status names.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\notification.py)",
            "summary": "\nThe code is a class called \"Notification\" that handles the contents and status of a notification. It includes a report, report URL, metrics, and destination. It also has a property that returns the title of the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier\\notifier.py)",
            "summary": "\nThis code is a notifier that periodically sends notifications to users about the number of red metrics. It uses asyncio and logging libraries, and interacts with a database to retrieve reports and measurements. It also has functions for recording health checks and determining the most recent measurement timestamp.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "type.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier_utilities\\type.py)",
            "summary": "\nThe code defines specific types for quality-time and imports the necessary libraries. It also defines a JSON type for dictionaries with string keys and any values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\strategies\\notification_strategy.py)",
            "summary": "\nThe code is a set of strategies for notifying users about metrics. It includes functions for handling notification contents and status, as well as determining if a metric has changed status after a given timestamp. The code also includes a class for finding and returning reports that require notifying. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\fixtures.py)",
            "summary": "\nThe code creates a fake report with a unique ID, title, subjects, metrics, and notification destinations. It also has the option to include a \"deleted\" flag.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_fixtures.py)",
            "summary": "\nThe code creates a fixture for reports and includes tests for creating a report and creating a report with deleted data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_quality_time_notifier.py)",
            "summary": "\nThis code contains unit tests for the main script of a notifier, which includes testing the default logging level and the ability to change the logging level. It uses mocking and patching to simulate certain functions and test different scenarios.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_measurements.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the measurements collection. It imports necessary modules and sets up fixtures for the tests. It then tests the functionality of getting recent measurements and setting a limit for the number of measurements returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_reports.py)",
            "summary": "\nThis code contains unit tests for retrieving reports from a database. It sets up a mock database and tests the function for getting reports and measurements, ensuring that the correct data is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\destinations\\test_teams.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for a Teams notification destination. It includes a base class for the tests, tests for sending notifications to a valid or invalid webhook, and tests for building the notification text.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\models\\test_metric_notification_data.py)",
            "summary": "\nThis code contains unit tests for the metric notification data model, which includes testing for new status, unknown status, and unknown status without recent measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\notifier\\test_notifier.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the Quality-time notifier. It includes tests for the most recent measurement timestamp method, the record_health method, and the notify method. The tests use mock objects and patches to simulate different scenarios and ensure the proper functioning of the notifier. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\strategies\\test_notification_strategy.py)",
            "summary": "\nThis code contains unit tests for the notification strategies, which are used to determine the number of new red metrics per report. It includes various tests for different scenarios, such as when there are no reports or no red metrics, and also tests for metrics that have become red or have changed status. It also tests for multiple reports with the same destination and for cases where there are no notification destinations configured or included in the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\quality_time_notifier.py)",
            "summary": "\nThe code is a notifier that uses asyncio to send notifications indefinitely. It sets the log level and sleep duration, and then runs the notify function using a database connection.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 134,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\measurements.py)",
            "summary": "\nThis code is used for collecting recent measurements for specified metrics, without entities and issue status. It uses pymongo to connect to a database and retrieve the necessary data. The function `get_recent_measurements` takes in a database, a list of metrics, and a limit for the number of measurements per metric, and returns a list of measurements. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 226,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\reports.py)",
            "summary": "\nThis code is used to retrieve reports and measurements from a database, using the `get_reports_and_measurements` function. It imports necessary modules and defines the necessary data types, and then uses the `get_reports` and `get_metrics_from_reports` functions to retrieve the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 175,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "ms_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\destinations\\ms_teams.py)",
            "summary": "\nThis code creates a notification and sends it to Microsoft Teams using a webhook. It formats the contents of the notification and includes information about changed metrics and their values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 499,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\metric_notification_data.py)",
            "summary": "\nThis code is used to handle metric data needed for notifications. It imports necessary modules and defines constants. It also includes a class for MetricNotificationData and a method for getting user-friendly status names.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 497,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\notification.py)",
            "summary": "\nThe code is a class called \"Notification\" that handles the contents and status of a notification. It includes a report, report URL, metrics, and destination. It also has a property that returns the title of the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 141,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier\\notifier.py)",
            "summary": "\nThis code is a notifier that periodically sends notifications to users about the number of red metrics. It retrieves reports and measurements from a database, determines which notifications to send, and records the current date and time for health checks.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 434,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "type.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier_utilities\\type.py)",
            "summary": "\nThe code defines specific types for quality-time and imports the necessary libraries. It also defines a JSON type for dictionaries with string keys and any values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 40,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\strategies\\notification_strategy.py)",
            "summary": "\nThe code is a set of strategies for notifying users about metrics. It includes functions for handling notification contents and status, as well as determining if a metric has changed status after a given timestamp. The code also includes a class for finding and returning reports that require notifying. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 457,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\fixtures.py)",
            "summary": "\nThe code creates a fake report with a unique ID, title, subjects, metrics, and notification destinations. It also has the option to include a \"deleted\" flag.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 232,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_fixtures.py)",
            "summary": "\nThe code creates a fixture for reports and includes tests for creating a report and creating a report with deleted data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 146,
            "num_tokens_output": 23,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_quality_time_notifier.py)",
            "summary": "\nThis code contains unit tests for the main script of a notifier, which includes testing the default logging level and the ability to change the logging level. The tests use mocking and patching to simulate certain functions and values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 190,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_measurements.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the measurements collection. It imports necessary modules and sets up fixtures for the tests. It then tests the functionality of getting recent measurements from a database, including a test for limiting the number of measurements returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 744,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_reports.py)",
            "summary": "\nThis code contains unit tests for retrieving reports from a database. It sets up a mock database and tests the function for getting reports and measurements, ensuring that the correct data is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 304,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\destinations\\test_teams.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for a Teams notification destination. It includes a base class for the tests, tests for sending notifications to a valid or invalid webhook, and tests for building the notification text.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 870,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\models\\test_metric_notification_data.py)",
            "summary": "\nThis code contains unit tests for the metric notification data model, which includes testing for new status, unknown status, and unknown status without recent measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 344,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\notifier\\test_notifier.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the Quality-time notifier. It includes tests for the most recent measurement timestamp method, the record_health method, and the notify method. The tests use mock objects and patches to simulate different scenarios and ensure the proper functioning of the notifier. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1885,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\strategies\\test_notification_strategy.py)",
            "summary": "\nThis code contains unit tests for the notification strategies, which are used to determine the number of new red metrics per report. It includes various tests for different scenarios, such as no reports, no red metrics, and recently changed metric status. It also tests for multiple reports with the same destination and checks for notification destinations in the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1719,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        }
    ]
}