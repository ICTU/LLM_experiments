{
    "experiment1_summarization": [
        {
            "name": "quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\quality_time_notifier.py)",
            "summary": "\nThe code is a notifier that uses asyncio to send notifications indefinitely. It sets the log level and sleep duration, and then runs the notify function using a database connection.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\measurements.py)",
            "summary": "\nThis code is used for collecting recent measurements for specified metrics, without entities and issue status. It uses pymongo to connect to a database and retrieve the necessary data. The function `get_recent_measurements` takes in a database, a list of metrics, and a limit for the number of measurements per metric, and returns a list of measurements. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\reports.py)",
            "summary": "\nThe code delineated by the triple backticks is a function that retrieves reports and measurements from a database. It imports necessary modules and defines the function, including type annotations. It also includes a conditional statement for type checking and imports additional modules if necessary. The function returns a tuple of lists containing reports and measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "ms_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\destinations\\ms_teams.py)",
            "summary": "\nThis code creates a notification and sends it to Microsoft Teams using a webhook. It formats the contents of the notification and includes information about changed metrics and their values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\metric_notification_data.py)",
            "summary": "\nThis code is used to handle metric data needed for notifications. It imports necessary modules and defines constants. It also includes a class for MetricNotificationData and a method for getting user-friendly status names.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\notification.py)",
            "summary": "\nThe code is a class called \"Notification\" that handles the contents and status of a notification. It includes a report, report URL, metrics, and destination. It also has a property that returns the title of the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier\\notifier.py)",
            "summary": "\nThis code is a notifier that periodically sends notifications to users about the number of red metrics. It uses asyncio and logging libraries, and interacts with a database to retrieve reports and measurements. It also has functions for recording health checks and determining the most recent measurement timestamp.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "type.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier_utilities\\type.py)",
            "summary": "\nThe code defines specific types for quality-time and imports the necessary libraries. It also defines a JSON type for dictionaries with string keys and any values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\strategies\\notification_strategy.py)",
            "summary": "\nThe code is a set of strategies for notifying users about metrics. It includes functions for handling notification contents and status, as well as determining if a metric has changed status after a given timestamp. The code also includes a class for finding and returning reports that require notifying. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\fixtures.py)",
            "summary": "\nThe code creates a fake report with a unique ID, title, subjects, metrics, and notification destinations. It also has the option to include a \"deleted\" flag.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_fixtures.py)",
            "summary": "\nThe code creates a fixture for reports and includes tests for creating a report and creating a report with deleted data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_quality_time_notifier.py)",
            "summary": "\nThis code contains unit tests for the main script of a notifier, which includes testing the default logging level and the ability to change the logging level. It uses mocking and patching to simulate certain functions and test different scenarios.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_measurements.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the measurements collection. It imports necessary modules and sets up fixtures for the tests. It then tests the functionality of getting recent measurements and setting a limit for the number of measurements returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_reports.py)",
            "summary": "\nThis code contains unit tests for retrieving reports from a database. It sets up a mock database and tests the function for getting reports and measurements, ensuring that the correct data is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\destinations\\test_teams.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for a Teams notification destination. It includes a base class for the tests, tests for sending notifications to a valid or invalid webhook, and tests for building the notification text.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\models\\test_metric_notification_data.py)",
            "summary": "\nThis code contains unit tests for the metric notification data model, which includes testing for new status, unknown status, and unknown status without recent measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\notifier\\test_notifier.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the Quality-time notifier. It includes tests for the most recent measurement timestamp method, the record_health method, and the notify method. The tests use mock objects and patches to simulate different scenarios and ensure the proper functioning of the notifier. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\strategies\\test_notification_strategy.py)",
            "summary": "\nThis code contains unit tests for the notification strategies, which are used to determine the number of new red metrics per report. It includes various tests for different scenarios, such as when there are no reports or no red metrics, and also tests for metrics that have become red or have changed status. It also tests for multiple reports with the same destination and for cases where there are no notification destinations configured or included in the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 256,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\quality_time_notifier.py)",
            "summary": "\nThe code is a notifier that uses asyncio to send notifications indefinitely. It sets the log level and sleep duration, and then runs the notify function using a database connection.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 134,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\measurements.py)",
            "summary": "\nThis code is used for collecting recent measurements for specified metrics, without entities and issue status. It uses pymongo to connect to a database and retrieve the necessary data. The function `get_recent_measurements` takes in a database, a list of metrics, and a limit for the number of measurements per metric, and returns a list of measurements. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 226,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\database\\reports.py)",
            "summary": "\nThis code is used to retrieve reports and measurements from a database, using the `get_reports_and_measurements` function. It imports necessary modules and defines the necessary data types, and then uses the `get_reports` and `get_metrics_from_reports` functions to retrieve the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 175,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "ms_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\destinations\\ms_teams.py)",
            "summary": "\nThis code creates a notification and sends it to Microsoft Teams using a webhook. It formats the contents of the notification and includes information about changed metrics and their values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 499,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\metric_notification_data.py)",
            "summary": "\nThis code is used to handle metric data needed for notifications. It imports necessary modules and defines constants. It also includes a class for MetricNotificationData and a method for getting user-friendly status names.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 497,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\models\\notification.py)",
            "summary": "\nThe code is a class called \"Notification\" that handles the contents and status of a notification. It includes a report, report URL, metrics, and destination. It also has a property that returns the title of the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 141,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier\\notifier.py)",
            "summary": "\nThis code is a notifier that periodically sends notifications to users about the number of red metrics. It retrieves reports and measurements from a database, determines which notifications to send, and records the current date and time for health checks.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 434,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "type.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\notifier_utilities\\type.py)",
            "summary": "\nThe code defines specific types for quality-time and imports the necessary libraries. It also defines a JSON type for dictionaries with string keys and any values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 40,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\src\\strategies\\notification_strategy.py)",
            "summary": "\nThe code is a set of strategies for notifying users about metrics. It includes functions for handling notification contents and status, as well as determining if a metric has changed status after a given timestamp. The code also includes a class for finding and returning reports that require notifying. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 457,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\fixtures.py)",
            "summary": "\nThe code creates a fake report with a unique ID, title, subjects, metrics, and notification destinations. It also has the option to include a \"deleted\" flag.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 232,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_fixtures.py)",
            "summary": "\nThe code creates a fixture for reports and includes tests for creating a report and creating a report with deleted data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 146,
            "num_tokens_output": 23,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_quality_time_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\test_quality_time_notifier.py)",
            "summary": "\nThis code contains unit tests for the main script of a notifier, which includes testing the default logging level and the ability to change the logging level. The tests use mocking and patching to simulate certain functions and values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 190,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_measurements.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the measurements collection. It imports necessary modules and sets up fixtures for the tests. It then tests the functionality of getting recent measurements from a database, including a test for limiting the number of measurements returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 744,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\database\\test_reports.py)",
            "summary": "\nThis code contains unit tests for retrieving reports from a database. It sets up a mock database and tests the function for getting reports and measurements, ensuring that the correct data is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 304,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_teams.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\destinations\\test_teams.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for a Teams notification destination. It includes a base class for the tests, tests for sending notifications to a valid or invalid webhook, and tests for building the notification text.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 870,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_metric_notification_data.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\models\\test_metric_notification_data.py)",
            "summary": "\nThis code contains unit tests for the metric notification data model, which includes testing for new status, unknown status, and unknown status without recent measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 344,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notifier.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\notifier\\test_notifier.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the Quality-time notifier. It includes tests for the most recent measurement timestamp method, the record_health method, and the notify method. The tests use mock objects and patches to simulate different scenarios and ensure the proper functioning of the notifier. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1885,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": "test_notification_strategy.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\notifier\\tests\\strategies\\test_notification_strategy.py)",
            "summary": "\nThis code contains unit tests for the notification strategies, which are used to determine the number of new red metrics per report. It includes various tests for different scenarios, such as no reports, no red metrics, and recently changed metric status. It also tests for multiple reports with the same destination and checks for notification destinations in the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1719,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "notifier"
        },
        {
            "name": ".vulture_ignore_list.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\.vulture_ignore_list.py)",
            "summary": "\nThe code contains several unused functions, variables, and classes across different source collectors and metric collectors.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 319,
            "num_tokens_output": 20,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "quality_time_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\quality_time_collector.py)",
            "summary": "\nThis code is a measurement collector that uses asyncio to collect measurements indefinitely. It imports subclasses and starts the collection process using a database connection.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 139,
            "num_tokens_output": 28,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "api_source_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\api_source_collector.py)",
            "summary": "\nThis code is a collection of base classes for Jenkins plugin collectors, including a base class for source collectors and a base class for source up-to-dateness collectors. It also includes methods for retrieving API and landing URLs, as well as parsing response date and time. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 368,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\collector.py)",
            "summary": "\nThe code is a metrics collector that uses asyncio to asynchronously collect measurements for various metrics. It uses aiohttp to make HTTP requests and stores the collected data in a database. The collector prioritizes edited metrics and only collects data for metrics that have been changed or have not been collected recently. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 985,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "config.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\config.py)",
            "summary": "\nThe code sets up a configuration for a collector, including log level, health check file, sleep duration, measurement limit, and measurement frequency. It uses environment variables to set default values for these parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 126,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "file_source_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\file_source_collector.py)",
            "summary": "\nThis code is a collection of base classes for source collectors that retrieve files, including classes for CSV, HTML, JSON, and XML files. It includes methods for unzipping responses and parsing entities from JSON files.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 989,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "metric_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\metric_collector.py)",
            "summary": "\nThe code delineated by the triple backticks is a class that collects measurements for a specific metric. It includes methods for registering subclasses, creating source and issue status collectors, and checking for mandatory parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 753,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\source_collector.py)",
            "summary": "\nThis code is a collection of base classes for source collectors, which are subclasses that collect measurement data for a specific metric from a specific source. It includes classes for unmerged branches, time, version, and slow transactions collectors. These classes handle tasks such as connecting to the source, parsing responses, and determining which entities to include in the measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 3374,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "__init__.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\base_collectors\\__init__.py)",
            "summary": "\nThe code delineated by the triple backticks is a collection of metric collectors used to gather data from various sources, such as Jenkins plugins and files. It includes different types of collectors, such as CSV and JSON file collectors, and also includes source collectors for measuring time and transactions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 147,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "date_time.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\collector_utilities\\date_time.py)",
            "summary": "\nThis code provides utilities for working with dates and times, including functions for calculating days since or until a given date/time, parsing date/time from text, and creating date/time objects from parts or a timestamp.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 388,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "exceptions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\collector_utilities\\exceptions.py)",
            "summary": "\nThis code defines several custom exceptions for handling errors during data collection, including errors related to zip files, XML root elements, and missing data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 256,
            "num_tokens_output": 29,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "functions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\collector_utilities\\functions.py)",
            "summary": "\nThis code contains utility functions for parsing XML, manipulating strings, and keeping track of time. It also includes functions for rounding numbers and checking if a string is a regular expression.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1117,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "type.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\collector_utilities\\type.py)",
            "summary": "\nThis code defines specific types for quality-time, including dictionaries, lists, strings, and namespaces. It also imports the aiohttp library and creates a new type for URLs.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 146,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\database\\measurements.py)",
            "summary": "\nThis code is used to collect and store measurements in a database, using functions to insert, update, and retrieve data. It also includes a function to set the end date and time of a measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 400,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\database\\reports.py)",
            "summary": "\nThis code is a function that retrieves the latest metric with a specified metric uuid from a database of reports. It uses the shared_data_model and shared database filters to access and filter the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 161,
            "num_tokens_output": 39,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "change_failure_rate.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\metric_collectors\\change_failure_rate.py)",
            "summary": "\nThe code is a metric collector that calculates the change failure rate by combining data from different sources. It uses the issue and deployment sources to determine the number of failed deployments and only counts failed deployments in the final metric measurement. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 869,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\metric_collectors\\test_cases.py)",
            "summary": "\nThe code is a test cases collector that collects test results from different sources and calculates the overall test result for each test case. It also filters the test cases based on their test results and counts them.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1337,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "__init__.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\metric_collectors\\__init__.py)",
            "summary": "\nThe code is a collection of metrics, including change failure rate and test cases.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 44,
            "num_tokens_output": 17,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "entity.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\model\\entity.py)",
            "summary": "\nThis code creates a class to hold information about a measurement entity, including a safe key for URLs and Mongo documents, and a class to hold a list of unique entities. It overrides certain methods to filter out duplicate entities and make adding entities faster.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 465,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "issue_status.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\model\\issue_status.py)",
            "summary": "\nThis code delineated by triple backticks contains several data classes and a class to hold the status of issues. It also includes methods to convert the data into dictionaries and a type definition for the issue status category.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 665,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "measurement.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\model\\measurement.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of classes and functions used for creating and storing measurement values, entities, and error messages. It includes a class for source measurements, a class for metric measurements, and various helper functions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 609,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "parameters.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\model\\parameters.py)",
            "summary": "\nThis code defines a class called \"SourceParameters\" which contains methods for retrieving various parameters from a given source. These parameters include API URL, landing URL, private token, username, and password. The class also has a method for retrieving a specific parameter based on a given key. The code also includes a function for quoting strings if needed and handles multiple choice parameters by selecting default values or all values if no default is specified.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 551,
            "num_tokens_output": 86,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "responses.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\model\\responses.py)",
            "summary": "\nThis code creates a class called \"SourceResponses\" that holds information about responses from a source, including the API URL and any connection errors. It also includes methods for iterating, getting, setting, appending, inserting, and extending responses.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 346,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "__init__.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\model\\__init__.py)",
            "summary": "\nThe code is a model package that imports various entities, issue statuses, measurements, parameters, and responses.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 79,
            "num_tokens_output": 22,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "__init__.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\__init__.py)",
            "summary": "\nThe code delineated by the triple backticks is a collection of source collectors for various tools and platforms. These collectors are used to gather data and metrics related to security warnings, source up-to-dateness, performance tests, and other quality metrics. The code includes collectors for tools such as Jenkins, GitLab, Jira, OWASP Dependency Check, SonarQube, and Trello.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 2357,
            "num_tokens_output": 81,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\anchore\\security_warnings.py)",
            "summary": "\nThe code is a collector for Anchore security warnings that parses a JSON file and creates entities for each vulnerability with specific severities. It uses a hash function to ensure unique entities and includes the filename in the hash for cases where multiple images contain the same package with the same vulnerability. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 365,
            "num_tokens_output": 58,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\anchore\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the Anchore source up-to-dateness, which retrieves the analysis date and time from a report and compares it to the current date and time. It uses the JSONFileSourceCollector and TimePassedCollector classes, and overrides the _api_url and _parse_source_response_date_time methods to retrieve the details URL and parse the analysis date and time from the report, respectively.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 233,
            "num_tokens_output": 82,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\anchore_jenkins_plugin\\security_warnings.py)",
            "summary": "\nThis code is a plugin for Jenkins that collects security warnings from the Anchore Jenkins plugin. It uses various functions and types to retrieve and parse the security report JSON from the last successful build, and creates entities for each vulnerability found. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 575,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\anchore_jenkins_plugin\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the up-to-dateness of the Anchore Jenkins plugin security report, using the base collector from JenkinsPluginSourceUpToDatenessCollector.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 92,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "accessibility.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\axe_core\\accessibility.py)",
            "summary": "\nThe code is a collection of classes and functions used to collect accessibility violations from Axe-core JSON output. It includes methods for filtering entities based on impact, tags, and element filters, as well as parsing the JSON output and creating a unique key for each entity. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1097,
            "num_tokens_output": 54,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\axe_core\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that retrieves the source up-to-dateness of Axe-core JSON reports by parsing the timestamp from the response. It uses the base collectors JSONFileSourceCollector and TimePassedCollector, and the collector_utilities date_time and type.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 189,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\axe_core\\source_version.py)",
            "summary": "\nThis code is a collector that retrieves the version of Axe-core from its JSON reports. It uses the JSONFileSourceCollector and VersionCollector classes and overrides the _parse_source_response_version method to extract the version from the response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 169,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "accessibility.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\axe_csv\\accessibility.py)",
            "summary": "\nThis code is a collector class that uses CSV files to gather accessibility violations. It includes a function to filter out certain violations based on impact and element, and a function to parse the CSV and create entities. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 454,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "accessibility.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\axe_html_reporter\\accessibility.py)",
            "summary": "\nThis code is a collector class that uses Axe HTML reporter to collect accessibility violations from HTML files. It parses the violations and rules from the HTML and creates a key for each entity based on its attributes.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 887,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "average_issue_lead_time.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\average_issue_lead_time.py)",
            "summary": "\nThis code is a collector for Azure DevOps Server that calculates the average issue lead time. It uses the statistics module to calculate the mean and the collector_utilities module for date and time functions. It also includes a function to determine whether an issue should be counted and a function to parse the value and entity of a completed work item.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 579,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\base.py)",
            "summary": "\nThe code is a collection of base classes for Azure DevOps Server collectors. It includes functions for retrieving and parsing data from repositories, jobs, and pipelines. The code also includes methods for filtering and including specific entities based on user-defined parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1519,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "failed_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\failed_jobs.py)",
            "summary": "\nThis code is for a collector that gathers information on failed jobs in Azure DevOps. It includes a class for the failed jobs metric and a function to check for failure type.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 116,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "issues.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\issues.py)",
            "summary": "\nThe code delineated by the triple backticks is a collector that retrieves issues from Azure DevOps Server. It uses a post request to get the work items and parses the response to extract the necessary information. It also handles pagination and authentication.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1048,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "job_runs_within_time_period.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\job_runs_within_time_period.py)",
            "summary": "\nThis code is a collector that counts pipeline runs within a specified time period from Azure DevOps Server. It includes an entity if the build date is within the specified time period.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 181,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "merge_requests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\merge_requests.py)",
            "summary": "\nThis code is a collector for merge requests (pull requests) in Azure DevOps Server. It uses pagination to retrieve all merge requests and parses the responses to create entities. The total number of merge requests and their details are collected and returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 959,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\source_up_to_dateness.py)",
            "summary": "\nThis code is for a collector that measures the up-to-dateness of a repository or a job/pipeline in Azure DevOps Server. It uses the aiohttp library to make API calls and the datetime library to handle date and time data. There are also classes for specific types of up-to-dateness measurements, such as for files or jobs, and a factory class to create the appropriate collector based on the source type. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 730,
            "num_tokens_output": 88,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\tests.py)",
            "summary": "\nThe code is a collector for the tests metric in Azure DevOps Server. It parses test runs and includes only those that match the specified criteria. It counts the number of tests and total tests, and creates entities for each test run.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 794,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "unmerged_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\unmerged_branches.py)",
            "summary": "\nThis code is for a collector that gathers information on unmerged branches from Azure DevOps Server. It extends a base collector and uses various functions and APIs to retrieve and process the data. The collector considers branches unmerged if they have a base branch, have commits that are not on the base branch, have not been committed to for a minimum number of days, and are not to be ignored. It also provides a landing URL for each branch.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 474,
            "num_tokens_output": 90,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "unused_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\unused_jobs.py)",
            "summary": "\nThis code is a collector for the unused jobs metric in Azure DevOps. It filters out jobs that have not been used in a specified number of days.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 172,
            "num_tokens_output": 32,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "user_story_points.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\user_story_points.py)",
            "summary": "\nThis code is a collector that retrieves user story points from Azure DevOps Server. It uses functions and types from other modules and inherits from the `AzureDevopsIssues` class. It also overrides certain methods to parse and calculate the sum of story points from the responses. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 400,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "__init__.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\azure_devops\\__init__.py)",
            "summary": "\nThe code is for collecting metrics from Azure DevOps Server, using version 4.1 of the API to support TFS 2018 and newer. A link to the API and TFS version mapping is provided for reference.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 90,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\bandit\\security_warnings.py)",
            "summary": "\nThis code is a Bandit security warnings collector that parses security warnings and includes them in a measurement based on their severity and confidence levels. It uses JSONFileSourceCollector and Entities to store and retrieve the warnings.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 283,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\bandit\\source_up_to_dateness.py)",
            "summary": "\nThe code is a Bandit source up-to-dateness collector that uses the datetime library and other utilities to collect data from a JSON file. It overrides a method to parse the timestamp and return it as a datetime object.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 141,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\calendar\\source_up_to_dateness.py)",
            "summary": "\nThe code is a collector class that collects the number of days since a user-specified date from a calendar source. It uses the base collector class and overrides two methods to parse the source response date times and date time. The latter method is never called as the calendar has no real source responses.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 239,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "time_remaining.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\calendar\\time_remaining.py)",
            "summary": "\nThis code is a collector that calculates the number of days remaining until a user-specified date. It imports necessary modules and defines a class that overrides methods to retrieve and parse the date from the user input. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 232,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cargo_audit\\security_warnings.py)",
            "summary": "\nThis code is a Cargo Audit security warnings collector that parses security warnings from a JSON file and creates entities for each vulnerability.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 275,
            "num_tokens_output": 25,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "loc.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cloc\\loc.py)",
            "summary": "\nThe code is a cloc LOC collector that parses the LOC from JSON responses and creates an entity from a cloc programming language count. It can handle different formats and allows for ignoring certain languages and files. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 633,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cloc\\source_version.py)",
            "summary": "\nThis code is a collector that collects the version of cloc from a JSON report. It uses the VersionCollector and JSONFileSourceCollector classes and overrides a method to parse the version from the JSON.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 132,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura\\base.py)",
            "summary": "\nThis code is a base class for Cobertura coverage report collectors. It imports necessary modules and defines a class for parsing source responses and measuring coverage. It also includes a function for parsing the coverage from the responses.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 206,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that collects the Cobertura report age by parsing the timestamp from the response and calculating the time passed since the report was last updated. It uses the datetime library and functions from other modules to perform this task.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 171,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura\\source_version.py)",
            "summary": "\nThis code is a Cobertura coverage report source version collector that parses the version from the response and collects it using XML file source and version collector.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 142,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura\\uncovered_branches.py)",
            "summary": "\nThis code is a class that collects uncovered branches from Cobertura coverage reports. It inherits from a base class and specifies the coverage type as \"branches\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 80,
            "num_tokens_output": 31,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura\\uncovered_lines.py)",
            "summary": "\nThis code is a class that collects uncovered lines from Cobertura coverage reports. It inherits from a base class and specifies the coverage type as \"lines\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 79,
            "num_tokens_output": 31,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura_jenkins_plugin\\base.py)",
            "summary": "\nThe code is a collection of base classes for Cobertura Jenkins plugin coverage report collectors. It includes an abstract base class, a base class for coverage collectors, and a function for parsing coverage measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 235,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura_jenkins_plugin\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the Cobertura Jenkins plugin coverage report source up-to-dateness. It imports necessary modules and inherits from base classes to perform its function.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 117,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura_jenkins_plugin\\uncovered_branches.py)",
            "summary": "\nThis code is a collector for the Cobertura Jenkins plugin coverage report, specifically for uncovered lines and branches. It is a subclass of the CoberturaJenkinsPluginCoverageBaseClass and specifies the coverage type as \"conditionals\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 86,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cobertura_jenkins_plugin\\uncovered_lines.py)",
            "summary": "\nThis code is a collector for the Cobertura Jenkins plugin coverage report, specifically for uncovered lines. It is a subclass of the CoberturaJenkinsPluginCoverageBaseClass and has a coverage type of \"lines\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 84,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\composer\\dependencies.py)",
            "summary": "\nThis code is a Composer dependencies collector that parses the dependencies and returns a measurement of the entities included, their versions, and other relevant information. It also includes a function to filter which entities are included in the measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 313,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cxsast\\base.py)",
            "summary": "\nThe code is a set of base classes for the Checkmarx CxSAST product. It includes functions for retrieving a token, creating a landing URL, and getting source responses. It also has a class for Checkmarx collectors that require scans.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 920,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cxsast\\security_warnings.py)",
            "summary": "\nThis code is a collector for Checkmarx CxSAST security warnings. It extends the base collector class and overrides methods to get and parse the scan results for the number of security warnings.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 274,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cxsast\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for Checkmarx CxSAST source up-to-dateness, which measures the date and time of the most recent scan and calculates the number of days since then. It uses the collector_utilities and model libraries, and overrides the _parse_value function to parse the date and time from the scan data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 178,
            "num_tokens_output": 68,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\cxsast\\source_version.py)",
            "summary": "\nThis code is a Checkmarx CxSAST source version collector that uses the packaging.version library and other modules to measure the version of a Checkmarx CxSAST source. It extends the VersionCollector class and overrides certain methods to get the engine servers and Checkmarx version from the response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 243,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gatling\\base.py)",
            "summary": "\nThis code contains base classes for Gatling collectors, including a class for reading the stats.json file and another for reading the simulation.log file. It also includes methods for translating HTML URLs into Gatling file URLs and retrieving timestamps from the simulation.log file.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 335,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "performancetest_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gatling\\performancetest_duration.py)",
            "summary": "\nThis code is a collector for the performance test duration in Gatling. It imports necessary modules and defines a class for the collector. It also overrides a method to parse timestamps from the log and calculate the duration in minutes.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 144,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gatling\\slow_transactions.py)",
            "summary": "\nThis code is a collector for the number of slow transactions in a Gatling JSON report. It parses the transactions from the JSON and calculates various metrics such as sample count, error count, and response time. It then filters out transactions that are not considered slow and returns the remaining entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 384,
            "num_tokens_output": 58,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gatling\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the performance test report age, using Gatling logs. It imports necessary modules and classes, and overrides a method to parse the start date time of the test from the response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 186,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gatling\\source_version.py)",
            "summary": "\nThis code is a Gatling source version collector that parses the version from an XML file and returns it as a Version object. It uses the GatlingLogCollector and VersionCollector classes and overrides the _parse_source_response_version method to extract the version number from the XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 191,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gatling\\tests.py)",
            "summary": "\nThis code is a collector for the number of successful and/or failing performance test transactions. It parses the transactions from the responses and returns the transactions with the desired status.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 342,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\generic_json\\security_warnings.py)",
            "summary": "\nThis code is a generic collector for security warnings that parses the warnings from a JSON file and creates entities with a unique key, title, description, and severity.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 210,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\base.py)",
            "summary": "\nThe code is a collection of base classes for GitLab collectors, which includes functions for retrieving source responses, adding private tokens to headers, and parsing job entities. It also includes classes for specific types of GitLab collectors, such as project and job collectors.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1181,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "change_failure_rate.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\change_failure_rate.py)",
            "summary": "\nThis code is a collector that retrieves the change failure rate from GitLab using a job runs within a specified time period.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 77,
            "num_tokens_output": 25,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "failed_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\failed_jobs.py)",
            "summary": "\nThis code is a collector class that retrieves failed job counts from GitLab. It includes a function to determine if a job has failed and uses a base class for additional functionality.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 120,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "job_runs_within_time_period.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\job_runs_within_time_period.py)",
            "summary": "\nThis code is a collector class that measures the number of GitLab CI builds run within a specified time period. It includes functions to retrieve and filter the relevant jobs and entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 249,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "merge_requests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\merge_requests.py)",
            "summary": "\nThe code is a collector class that uses the GitLab GraphQL API to retrieve merge requests and parse them into entities. It also includes a query to determine whether the GitLab instance has the approved field for merge requests. The class can be used to measure the number of merge requests and their approval status.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1610,
            "num_tokens_output": 61,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collection of classes and functions used to measure the up-to-dateness of a repository or specific files within a repository on GitLab. It includes methods for retrieving commit and pipeline data, as well as parsing and calculating the up-to-dateness value. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1473,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\source_version.py)",
            "summary": "\nThis code is a GitLab source version collector that measures the version of a GitLab instance. It uses the packaging library to handle version numbers and inherits from a base collector class. It overrides methods to return the version API URL and parse the response to get the GitLab version.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 191,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "unmerged_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\unmerged_branches.py)",
            "summary": "\nThis code is a collector for GitLab unmerged branches. It uses the GitLab API to retrieve information about unmerged and inactive branches, and provides a landing URL for each branch. It also allows for customization of which branches to ignore and how many days to consider a branch inactive.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 413,
            "num_tokens_output": 58,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "unused_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\gitlab\\unused_jobs.py)",
            "summary": "\nThis code is a collector class that retrieves unused job counts from GitLab. It includes a function to determine if a job is unused based on a specified number of inactive days.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 148,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\harbor\\security_warnings.py)",
            "summary": "\nThe code is a Harbor security warnings collector that collects security warnings from Harbor repositories and projects. It uses the Harbor REST API to retrieve data and follows pagination links to get all the necessary information. It also checks for valid credentials and skips projects and repositories based on user-defined parameters. Finally, it parses the collected data and creates entities with relevant information such as project, repository, artifact, and severity level.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1646,
            "num_tokens_output": 81,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\harbor_json\\security_warnings.py)",
            "summary": "\nThis code is a Harbor JSON security warnings collector that parses vulnerabilities from a Harbor JSON file and includes them in a measurement based on specified severities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 450,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco\\base.py)",
            "summary": "\nThis code contains base classes for unit tests of Jacoco coverage reports. It imports necessary modules and defines a base class for Jacoco coverage collectors. It also includes a function to parse the coverage from the Jacoco XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 250,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that collects the age of a Jacoco coverage report. It imports necessary modules and defines a class that overrides a function to parse the datetime from the report's XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 200,
            "num_tokens_output": 39,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco\\uncovered_branches.py)",
            "summary": "\nThis code is used to collect the number of uncovered branches from Jacoco XML reports. It is a subclass of the JacocoCoverageBaseClass and has a coverage type of \"branch\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 79,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco\\uncovered_lines.py)",
            "summary": "\nThe code is a class that collects uncovered lines from Jacoco XML reports and is a subclass of a base class. It specifies the coverage type as \"line\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 78,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco_jenkins_plugin\\base.py)",
            "summary": "\nThis code is for a base class used to collect coverage reports from the Jacoco Jenkins plugin. It imports necessary modules and defines two base classes, one for general Jacoco Jenkins plugin collectors and one for coverage collectors. It also includes a method for parsing the coverage data from the response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 196,
            "num_tokens_output": 58,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco_jenkins_plugin\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the up-to-dateness of the Jacoco Jenkins plugin coverage report, using the JenkinsPluginSourceUpToDatenessCollector and JacocoJenkinsPluginBaseClass.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 114,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco_jenkins_plugin\\uncovered_branches.py)",
            "summary": "\nThis code is a collector for the Jacoco Jenkins plugin coverage report, specifically for uncovered branches. It is a subclass of the JacocoJenkinsPluginCoverageBaseClass and has a coverage type of \"branch\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 84,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jacoco_jenkins_plugin\\uncovered_lines.py)",
            "summary": "\nThis code is a collector for the Jacoco Jenkins plugin coverage report, specifically for uncovered lines. It is a subclass of the JacocoJenkinsPluginCoverageBaseClass and has a coverage type of \"line\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 83,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\base.py)",
            "summary": "\nThis code is a Jenkins metric collector that collects job counts from Jenkins and parses the jobs to return the most recent build date and status. It also includes functions to filter and include specific jobs and builds.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 680,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "change_failure_rate.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\change_failure_rate.py)",
            "summary": "\nThis code is a collector that retrieves the change failure rate from Jenkins and parses the jobs to return the builds and their respective jobs for all selected jobs. It includes an entity if the build date is within the specified lookback days.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 398,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "failed_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\failed_jobs.py)",
            "summary": "\nThis code is a collector for failed jobs in Jenkins. It imports the necessary modules and extends the functionality to count jobs with specific failure types selected by the user.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 115,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "job_runs_within_time_period.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\job_runs_within_time_period.py)",
            "summary": "\nThis code is a collector class that measures the number of Jenkins jobs run within a specified time period. It includes functions to determine whether to include a build, count the number of builds within the time period, parse the jobs, and count the sum of jobs ran.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 385,
            "num_tokens_output": 54,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for Jenkins that retrieves the last build date from jobs and calculates how many days ago the jobs were built. It includes only builds with an allowed result type and uses the JenkinsJobs class as a base.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 235,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\source_version.py)",
            "summary": "\nThis code is a Jenkins source version collector that measures the version of a Jenkins instance. It uses the `VersionCollector` class and overrides the `_parse_source_response_version` method to return the Jenkins version from the response headers.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 107,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "unused_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins\\unused_jobs.py)",
            "summary": "\nThis code is a collector for Jenkins that retrieves unused jobs and counts them based on their most recent build date. It uses the `JenkinsJobs` class and checks if the build date is older than a specified number of days.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 182,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins_test_report\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that retrieves the age of a Jenkins test report. It extends the base collector class and overrides methods to get the test report and job URLs, and parse the timestamp from either the job or the test report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 319,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins_test_report\\tests.py)",
            "summary": "\nThe code is a collector that retrieves the number of tests from a Jenkins test report. It parses the report and returns the total number of tests, as well as the number of tests that passed, failed, or were skipped. It also includes information about individual test cases, such as their name, class name, and status.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 718,
            "num_tokens_output": 66,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jenkins_test_report\\test_cases.py)",
            "summary": "\nThe code is a collector for Jenkins test report test cases, which is a subclass of JenkinsTestReportTests. It is used to collect and organize test cases for Jenkins test reports.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 62,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "average_issue_lead_time.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\average_issue_lead_time.py)",
            "summary": "\nThis code is a Jira collector that calculates the average issue lead time for completed issues. It uses the statistics library to calculate the mean and the collector_utilities library for date and time functions. It also includes a method to filter out issues that are not completed and a method to calculate the lead time for each issue.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 358,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\base.py)",
            "summary": "\nThis code contains base classes for Jira collectors, including a JiraBase class that extends the SourceCollector class. It also includes methods for handling basic authentication credentials and adding a token to the headers for a get request.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 199,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "change_failure_rate.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\change_failure_rate.py)",
            "summary": "\nThis code is a collector that retrieves change failure rate data from Jira, using the JiraIssues class and a function to determine which issues to include.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 130,
            "num_tokens_output": 32,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "field_sum_base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\field_sum_base.py)",
            "summary": "\nThis code is a base class for Jira collectors that sum a custom Jira field. It includes methods for computing the value, creating entities, including issues, and getting the field to sum.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 371,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "issues.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\issues.py)",
            "summary": "\nThis code is a Jira issues collector that retrieves and parses data from Jira using the Jira API. It includes functions for getting the fields from Jira, creating entities from Jira issues, and determining the maximum number of issues to retrieve per page. It also allows for subclasses to compute the value from the entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1488,
            "num_tokens_output": 66,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "issue_status.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\issue_status.py)",
            "summary": "\nThis code is a Jira issue status collector that retrieves the status of an issue from Jira and maps it to a Quality-time status category. It also parses the issue's release and sprint information.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 787,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "manual_test_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\manual_test_duration.py)",
            "summary": "\nThis code is a collector that retrieves the manual test duration from Jira and stores it in a field. It is based on the JiraFieldSumBase class and uses the \"manual_test_duration_field\" parameter to specify the field and \"duration\" as the entity key.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 83,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "manual_test_execution.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\manual_test_execution.py)",
            "summary": "\nThis code is a collector for tracking the number of manual test cases that have not been executed recently enough in Jira. It uses various utilities and modules to gather information about the test cases and their execution frequency.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 409,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\source_version.py)",
            "summary": "\nThis code is a Jira source version collector that uses the JiraBase and VersionCollector classes to retrieve the server info from Jira and return the Jira version. It uses the packaging.version library and the collector_utilities.type module to handle the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 160,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\test_cases.py)",
            "summary": "\nThe code is a Jira test case collector that inherits from a Jira issues class. It is used to collect test cases from Jira.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 55,
            "num_tokens_output": 30,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "user_story_points.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\user_story_points.py)",
            "summary": "\nThe code is a Jira user story points collector that uses a field sum base and gets user story points from Jira. It has a field parameter and an entity key.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 82,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "velocity.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jira\\velocity.py)",
            "summary": "\nThe code is a collector that retrieves sprint velocity data from Jira, using the Greenhopper velocity chart API. It parses the data and creates a sprint entity with relevant information such as completed and committed points, and a link to the velocity chart. It also allows for customization of the board and velocity type.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1146,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_csv\\base.py)",
            "summary": "\nThis code includes base classes for JMeter CSV collectors, which are used to collect data from CSV files. It imports necessary modules and defines a class for JMeter CSV file collectors. The class includes methods for retrieving timestamps and samples, parsing CSV rows, and counting successful and errored samples.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 471,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "performancetest_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_csv\\performancetest_duration.py)",
            "summary": "\nThis code is a collector for JMeter CSV performance test duration, which parses timestamps from samples and calculates the duration in minutes. It uses the JMeterCSVCollector and SourceResponses from the collector_utilities library.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 144,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_csv\\slow_transactions.py)",
            "summary": "\nThis code is a collector for the number of slow transactions in a JMeter CSV report. It parses the security warnings from the CSV and calculates various response time metrics for each transaction. It then filters out transactions that are not considered slow and returns the remaining entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 362,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_csv\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for a performance test report that calculates the age of the report by parsing the start date and time from the response. It uses the JMeter CSV source and the TimePassedCollector to determine the age of the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 186,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_csv\\tests.py)",
            "summary": "\nThis code is a collector for the number of successful and/or failing performance test transactions. It parses the transactions from the responses and returns the transactions with the desired status.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 283,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_json\\slow_transactions.py)",
            "summary": "\nThis code is a collector for the number of slow transactions in a JMeter JSON report. It parses the transactions from the JSON and creates a TransactionEntity for each one, filtering out any that are not considered slow.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 341,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\jmeter_json\\tests.py)",
            "summary": "\nThe code is a collector for the number of successful and/or failing performance test transactions. It parses the transactions from the responses and returns the transactions with the desired status.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 321,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\junit\\source_up_to_dateness.py)",
            "summary": "\nThis code is a JUnit metric collector that collects the age of a JUnit report. It parses the timestamp from the response and returns the date that the test ran. If there is no timestamp, it returns the current date and time.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 354,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\junit\\tests.py)",
            "summary": "\nThis code is a collector for JUnit tests that parses the tests from the JUnit XML and includes the entities in the measurement based on the specified test result.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 447,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\junit\\test_cases.py)",
            "summary": "\nThis code is a JUnit test cases collector that inherits from a JUnitTests class and is used to collect JUnit test cases.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 53,
            "num_tokens_output": 28,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "all_metrics.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\manual_number\\all_metrics.py)",
            "summary": "\nThe code is a metric collector that returns a manually entered number. It imports necessary modules and defines a class for the collector. The collector overrides a method to return the user-supplied manual number.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 102,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\ncover\\base.py)",
            "summary": "\nThe code is a set of base classes for NCover collectors that includes methods for finding and parsing coverage data from NCover HTML/JavaScript.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 334,
            "num_tokens_output": 29,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\ncover\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that collects the age of an NCover report by parsing the date and time from the HTML/JavaScript of the report. It uses the base collectors and utilities from the NCoverBase class and overrides the _parse_source_response_date_time function to extract the date and time from the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 200,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\ncover\\uncovered_branches.py)",
            "summary": "\nThis code is a collector for NCover that gathers information on uncovered branches. It is a subclass of NCoverCoverageBase and has a coverage type of \"branch\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 66,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\ncover\\uncovered_lines.py)",
            "summary": "\nThis code is a collector that uses NCover to get the uncovered lines in a codebase. It is based on the NCoverCoverageBase class and uses sequence points to determine coverage.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 105,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\npm\\dependencies.py)",
            "summary": "\nThis code is a npm dependencies collector that parses dependencies from a JSON file and creates an entity for each dependency with its name, current version, wanted version, and latest version.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 182,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\ojaudit\\violations.py)",
            "summary": "\nThe code is a collector that retrieves violations from OJAudit and parses them from an XML file. It keeps track of the number of duplicated violations and returns the violations as entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 897,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\openvas\\security_warnings.py)",
            "summary": "\nThis code is a collector that retrieves security warnings from OpenVAS and parses them from an XML file. It maps OpenVAS attribute names to measurement entity attribute names and includes entities based on specified severities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 430,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\openvas\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for OpenVAS source up-to-dateness, which uses the datetime library and other utilities to parse and collect data from an XML file. It overrides a function to parse the date and time from the OpenVAS XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 165,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\openvas\\source_version.py)",
            "summary": "\nThis code is used to collect the version of OpenVAS from an XML file source. It uses the VersionCollector and XMLFileSourceCollector classes and overrides the _parse_source_response_version function to parse the version from the XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 140,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_dependency_check\\base.py)",
            "summary": "\nThis code contains base classes for OWASP Dependency Check collectors, including an abstract class and a class for XML file source collectors. It also includes a list of allowed root tags for different versions of OWASP Dependency Check.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 165,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_dependency_check\\dependencies.py)",
            "summary": "\nThis code is a collector that retrieves dependencies from an OWASP Dependency Check XML report. It parses the report and extracts the dependencies, creating entities for each one. The collector also generates a stable file path and landing URL for each dependency.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 601,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_dependency_check\\security_warnings.py)",
            "summary": "\nThis code is a collector that retrieves security warnings from the OWASP Dependency Check XML report. It overrides the `_dependencies` and `_parse_entity` methods to return only vulnerable dependencies and parse the entity from the dependency, respectively. It also has a private method, `__vulnerabilities`, that returns the vulnerabilities with specified severities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 467,
            "num_tokens_output": 68,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_dependency_check\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that collects the OWASP Dependency Check report age by parsing the report date from the XML. It uses the base collectors and utilities to retrieve and parse the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 192,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_dependency_check\\source_version.py)",
            "summary": "\nThis code is a concise summary for the OWASP Dependency Check source version collector, which collects the version of OWASP Dependency Check from a report. It uses the packaging.version library and inherits from the VersionCollector and OWASPDependencyCheckBase classes. It also overrides a function to parse the version from an XML response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 177,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_zap\\security_warnings.py)",
            "summary": "\nThis code is a collector that retrieves security warnings from OWASP ZAP. It parses the warnings from an XML file and creates entities for each warning. The code also includes functions for creating alert instance and alert type entities, as well as a function for removing variable parts from a URL. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 739,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_zap\\source_up_to_dateness.py)",
            "summary": "\nThe code is a collector for the OWASP ZAP metric that collects the report age from an XML file source. It uses the datetime library and functions from other collectors to parse the date and time from the XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 156,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\owasp_zap\\source_version.py)",
            "summary": "\nThis code is a collector that collects the version of OWASP ZAP from an XML file source. It uses the packaging.version library to parse the version from the XML and returns it as a Version object.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 173,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\base.py)",
            "summary": "\nThis code is a base class for performance test runner collectors that inherits from the HTMLFileSourceCollector class and the ABC class. It contains a method to return the name of a transaction.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 106,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "performancetest_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\performancetest_duration.py)",
            "summary": "\nThis code is a performance test runner that collects and parses performance test durations from a source. It uses the BeautifulSoup library to parse the HTML response and calculates the sum of the durations in minutes. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 238,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "performancetest_scalability.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\performancetest_scalability.py)",
            "summary": "\nThis code is a performance test runner that collects data on scalability. It parses the breaking point and total number of virtual users from the responses and uses BeautifulSoup to find specific elements in the response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 384,
            "num_tokens_output": 39,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "performancetest_stability.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\performancetest_stability.py)",
            "summary": "\nThis code is a performance test runner that collects data on the stability of a performance test. It uses BeautifulSoup to parse the data and returns the minimum trend break percentage. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 217,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\slow_transactions.py)",
            "summary": "\nThis code is a performance test runner that collects data on slow transactions. It uses BeautifulSoup to parse the data and match the transactions to include or ignore. It also transforms the transactions into entities and determines their threshold based on their performance.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 408,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "software_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\software_version.py)",
            "summary": "\nThis code is a performance test-runner software version collector that uses BeautifulSoup and packaging libraries to collect and parse the software version from a performance report. It is a subclass of the PerformanceTestRunnerBaseClass and VersionCollector, and it uses the _parse_source_response_version and __application_version methods to retrieve and return the application version from the response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 191,
            "num_tokens_output": 69,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\source_up_to_dateness.py)",
            "summary": "\nThis code is a performance test-runner source up-to-dateness collector that parses the start date time of a test from a response and calculates the time passed since then. It uses the BeautifulSoup library and inherits from a base class for performance test runners.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 264,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\performancetest_runner\\tests.py)",
            "summary": "\nThis code is a performance test runner that collects data from a source and parses the transactions to determine the number of successful and/or failing performance test transactions. It uses BeautifulSoup to parse the HTML table and has functions to include or ignore specific transactions. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 515,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\pip\\dependencies.py)",
            "summary": "\nThis code is a pip dependencies collector that parses dependencies from a JSON file and creates an entity for each dependency with its name, version, and latest version. It uses the base collector JSONFileSourceCollector and overrides the _parse_json function to extract the dependencies from the JSON. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 172,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\pyupio_safety\\security_warnings.py)",
            "summary": "\nThis code is a Pyup.io Safety security warnings collector that parses security warnings from a JSON file and creates entities with relevant information such as package, installed, affected, and vulnerability.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 248,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\quality_time\\base.py)",
            "summary": "\nThis code is a set of base classes for Quality-time collectors, which includes an API URL function and a function to get relevant reports from a response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 275,
            "num_tokens_output": 31,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "metrics.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\quality_time\\metrics.py)",
            "summary": "\nThis code is a collector that retrieves the \"metrics\" metric from Quality-time, using the reports API path. It parses the responses and extracts the relevant metrics, and updates the entity attributes with the necessary information.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1218,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "missing_metrics.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\quality_time\\missing_metrics.py)",
            "summary": "\nThis code is a QualityTime missing metrics collector that collects the number of missing metrics from Quality-time. It uses a datamodel and reports to get the metric entities and includes entities based on certain parameters. It also calculates the number of possible metric types and returns the missing metric types as entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1024,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\quality_time\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that retrieves the \"source up-to-dateness\" metric from Quality-time. It uses the base collectors and utilities to get the reports API path and parse the oldest datetime from recent measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 310,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\quality_time\\source_version.py)",
            "summary": "\nThis code is a version collector for Quality-time source, which uses the VersionCollector and Response utilities to retrieve and parse the source version from the Quality-time API.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 150,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework\\base.py)",
            "summary": "\nThis code is a base class for Robot Framework collectors that extends the functionality of the XMLFileSourceCollector class. It includes a method for changing the filename and inherits from the ABC class.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 127,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the Robot Framework report age, using the base collector class and functions to parse the date and time from the XML response. It overrides the default method to parse the date and time from the Robot Framework XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 162,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework\\source_version.py)",
            "summary": "\nThis code is a Robot Framework source version collector that parses the version from the Robot Framework XML and returns it as a Version object. It uses the base collectors and utilities functions to retrieve and parse the version.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 181,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework\\tests.py)",
            "summary": "\nThis code is a collector for Robot Framework tests that parses the tests from the Robot Framework XML and returns a measurement with the number of tests and their results. It also includes functions for parsing the XML and creating entities for each test.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 477,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework\\test_cases.py)",
            "summary": "\nThis code is a collector for Robot Framework test cases, extending from a class called \"RobotFrameworkTests\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 56,
            "num_tokens_output": 22,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework_jenkins_plugin\\base.py)",
            "summary": "\nThis code creates a base class for collecting Jenkins plugins related to Robot Framework. It imports the necessary modules and defines the base class, which inherits from JenkinsPluginCollector and ABC. The plugin being collected is specified as \"robot\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 77,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework_jenkins_plugin\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector for the up-to-dateness of the Robot Framework Jenkins plugin coverage report. It imports necessary modules and extends base classes to perform its function.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 109,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\robot_framework_jenkins_plugin\\tests.py)",
            "summary": "\nThis code is a collector for Robot Framework Jenkins plugin tests that parses the number of tests and returns a source measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 163,
            "num_tokens_output": 24,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sarif\\base.py)",
            "summary": "\nThe code is a SARIF JSON collector that reads SARIF JSON files and parses the analysis results. It includes a base class for collectors and methods for parsing the JSON and including entities in the measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 412,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sarif\\security_warnings.py)",
            "summary": "\nThe code is a SARIF JSON security warnings collector that is a subclass of SARIFJSONBase and is used to collect security warnings.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 62,
            "num_tokens_output": 28,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sarif\\violations.py)",
            "summary": "\nThis code is a SARIF JSON violations collector that is used to collect and store violations in a SARIF format. It is based on a SARIF JSON base class and is specifically designed for collecting violations.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 60,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\snyk\\security_warnings.py)",
            "summary": "\nThis code is a collector for Snyk security warnings, which parses JSON files and returns a list of entities with information about the vulnerabilities, including severity, number of vulnerabilities, and example vulnerability. It also has a function to determine the highest severity from a collection of severities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 502,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\base.py)",
            "summary": "\nThe code is a collection of base classes for SonarQube collectors. It includes methods for getting source responses, parsing metrics, and creating URLs for landing and API endpoints. It also includes methods for getting and organizing metrics from SonarQube API responses.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1112,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "commented_out_code.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\commented_out_code.py)",
            "summary": "\nThis code is a collector for commented-out code in SonarQube, but it is unable to calculate the percentage of commented-out code due to limitations in the SonarQube API. It is a subclass of SonarQubeViolations and uses a rules configuration for commented-out code.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 144,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "complex_units.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\complex_units.py)",
            "summary": "\nThis code is a collector for SonarQube complex units, specifically methods and functions. It inherits from a class for collecting violations with a percentage scale and has a specific configuration for complex unit rules and a total metric for functions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 91,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "duplicated_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\duplicated_lines.py)",
            "summary": "\nThis code is a SonarQube duplicated lines collector that is used to collect and analyze duplicated lines in code. It is a subclass of the SonarQubeMetricsBaseClass and has a value key for duplicated lines and a total key for lines.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 86,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "loc.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\loc.py)",
            "summary": "\nThis code is a SonarQube LOC collector that counts lines of code for various programming languages. It includes functions for matching strings or regular expressions, and uses a base class for SonarQube metrics. It also has a list of languages and their corresponding keys, and can return the ncloc per language if the user chooses to measure it. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 815,
            "num_tokens_output": 72,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "long_units.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\long_units.py)",
            "summary": "\nThis code is a collector for SonarQube long units, specifically methods/functions, and uses a percentage scale for violations. It inherits from the SonarQubeViolationsWithPercentageScale class and has a rules configuration for long unit rules and a total metric for functions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 91,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "many_parameters.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\many_parameters.py)",
            "summary": "\nThis code is a collector for SonarQube violations with many parameters. It inherits from a class for violations with a percentage scale and has a specific configuration for rules and a total metric for functions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 90,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "remediation_effort.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\remediation_effort.py)",
            "summary": "\nThis code is a class that collects data on SonarQube violation remediation effort. It uses a base class to generate a landing URL for the effort type and returns the user-selected effort types.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 553,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\security_warnings.py)",
            "summary": "\nThe code is a collector for SonarQube security warnings. It collects data on vulnerabilities and security hotspots and calculates the total number of security warnings. It also includes functions for generating landing URLs and parsing the collected data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1282,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "software_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\software_version.py)",
            "summary": "\nThis code is used to collect software versions from SonarQube projects. It imports necessary packages and defines a class for the collector. The version is parsed from the source response using a specific method.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 139,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\source_up_to_dateness.py)",
            "summary": "\nThe code is a collector for SonarQube that collects data on the source code's up-to-dateness. It uses the base collectors and utilities for date and time, and is based on the SonarQubeProjectAnalysesBase class. It overrides a method to parse the date of the most recent analysis.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 160,
            "num_tokens_output": 66,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\source_version.py)",
            "summary": "\nThis code is a version collector for SonarQube, using the packaging.version library and base_collectors and type modules. It extends the VersionCollector class and overrides the _api_url and _parse_source_response_version methods to retrieve and parse the SonarQube version from the server.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 153,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "suppressed_violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\suppressed_violations.py)",
            "summary": "\nThis code is a collector for SonarQube suppressed violations. It uses two SonarQube endpoints to get the suppressed violations, as well as issues closed as false positive and won't fix, and the total number of violations. It also includes a landing URL and a method to parse the source responses.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 644,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\tests.py)",
            "summary": "\nThis code is a SonarQube collector that collects data on the number of tests and their results. It uses the shared data model and has functions for retrieving and parsing the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 535,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "todo_and_fixme_comments.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\todo_and_fixme_comments.py)",
            "summary": "\nThis code is a collector for SonarQube todo and fixme comments, using a class called SonarQubeTodoAndFixmeComments that inherits from SonarQubeViolations. It includes a rules configuration for todo and fixme comments.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 89,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\uncovered_branches.py)",
            "summary": "\nThis code is a SonarQube uncovered branches collector that is used to gather data on uncovered branches in a codebase. It is a subclass of the SonarQubeMetricsBaseClass and has two key variables for storing the values and total number of conditions to cover.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 88,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\uncovered_lines.py)",
            "summary": "\nThis code is a SonarQube uncovered lines collector that is used to calculate the number of uncovered lines of code. It is a subclass of the SonarQubeMetricsBaseClass and has a value key of \"uncovered_lines\" and a total key of \"lines_to_cover\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 89,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\sonarqube\\violations.py)",
            "summary": "\nThe code is a class that collects SonarQube violations and is also used as a base class for metrics that measure specific rules. It includes functions for generating landing URLs, parsing responses, and creating entities from issues. It also supports a percentage scale and includes a subclass for this purpose.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1285,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\testng\\source_up_to_dateness.py)",
            "summary": "\nThis code is a TestNG source up-to-dateness collector that collects the age of a TestNG report. It uses the datetime library and inherits from two other collectors. It also overrides a function to parse the date and time from the TestNG XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 175,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\testng\\tests.py)",
            "summary": "\nThis code is a collector for TestNG tests that parses the tests from the TestNG XML and transforms them into entities. It uses a class variable to map test status to test result and makes assumptions about elements and attributes in the XML.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 639,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\testng\\test_cases.py)",
            "summary": "\nThis code is a collector for TestNG test cases, using the TestNGTests class.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 55,
            "num_tokens_output": 19,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\trello\\base.py)",
            "summary": "\nThis code is a collection of base classes for Trello metric collectors. It includes functions for getting landing URLs and source responses, as well as authentication and field parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 401,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "issues.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\trello\\issues.py)",
            "summary": "\nThe code delineated by the triple backticks is a collector that retrieves issues (cards) from Trello and parses them into entities. It includes functions to check if a card should be included based on its activity and due date, and converts a card into an entity.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 528,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\trello\\source_up_to_dateness.py)",
            "summary": "\nThis code is a collector that measures the up-to-dateness of a Trello board by getting the date and time of the most recent activity from its cards. It uses the Trello API and the datetime library to parse the response and calculate the date and time. It also has a function to ignore certain cards based on a parameter.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 275,
            "num_tokens_output": 69,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\src\\source_collectors\\trivy\\security_warnings.py)",
            "summary": "\nThis code is a Trivy JSON collector that parses vulnerabilities from a JSON file and creates entities based on the data. It includes a function to determine which entities to include in the measurement based on specified levels.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 581,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\fixtures.py)",
            "summary": "\nThe code creates a fake report with various parameters and returns it as a dictionary. It includes a metric and notification destination, and allows for customization of certain values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 555,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_fixtures.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\test_fixtures.py)",
            "summary": "\nThis code is a set of tests for a fixture used in creating reports. It imports necessary modules and defines variables for different IDs. The tests cover various scenarios for creating a report, including with different titles and keyword arguments. It also tests for errors when incorrect arguments are used.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 467,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_quality_time_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\test_quality_time_collector.py)",
            "summary": "\nThis code contains unit tests for the collector main script, including tests for starting the collector and changing the logging level. It uses the `unittest` and `AsyncMock` libraries, and patches the `Collector` class.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 238,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\base_collectors\\test_collector.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the collector main script. It includes imports, setup and test methods, and mock objects to test the collection methods. The code also tests for various scenarios such as successful and failed fetches, unsupported collectors, and missing mandatory parameters. It also includes a test for writing a health check file.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 2870,
            "num_tokens_output": 73,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_metric_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\base_collectors\\test_metric_collector.py)",
            "summary": "\nThis code is a unit test for a base metric collector. It imports necessary modules and defines a class for the metric collector test. It also includes a test for collecting issue statuses when there are no sources provided. The test uses a mock request and checks that the issue ID and sources are collected correctly.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 244,
            "num_tokens_output": 61,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_date_time.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\collector_utilities\\test_date_time.py)",
            "summary": "\nThis code contains unit tests for various date and time functions, including `days_ago`, `days_to_go`, `parse_datetime`, `datetime_fromparts`, and `datetime_fromtimestamp`. The tests cover different scenarios such as current time, past and future dates, and different time zones. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 791,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_functions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\collector_utilities\\test_functions.py)",
            "summary": "\nThe code contains unit tests for various utility functions, including functions for handling dates and times, rounding decimals, and manipulating URLs. The tests ensure that the functions are working properly and handle different types of inputs correctly.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1283,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_measurements.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\database\\test_measurements.py)",
            "summary": "\nThis code is a series of unit tests for the \"measurements\" collection in a database. It includes tests for creating new measurements, handling errors, and copying timestamps.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 852,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_reports.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\database\\test_reports.py)",
            "summary": "\nThe code is a set of unit tests for the latest metric in the reports collection. It uses a mock database and fixtures to test the functionality of the latest_metric function, which returns the most recent metric for a given report and metric ID. The tests cover scenarios where the latest metric exists, does not exist, and the report does not exist.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 352,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_change_failure_rate.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\metric_collectors\\test_change_failure_rate.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the change failure rate metric collector. It includes imports, class definitions, and test cases for various scenarios. The code uses mock objects and patching to simulate different scenarios and test the functionality of the metric collector. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 2343,
            "num_tokens_output": 58,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_test_cases.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\metric_collectors\\test_test_cases.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the test cases metric collector. It includes imports, class definitions, and methods for testing the functionality of the collector. The code also includes mock data and assertions to ensure the correct results are returned. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 2095,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_entity.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\model\\test_entity.py)",
            "summary": "\nThe code contains unit tests for the entity model class, including tests for removing duplicate entities and replacing unsafe characters in entity keys.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 169,
            "num_tokens_output": 26,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "jenkins_plugin_test_case.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins_plugin_test_case.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of generic unit tests for Jenkins plugin sources. It includes a mixin for unit tests related to up-to-dateness collectors, as well as a test for checking the source up-to-dateness. The code uses the \"source_up_to_dateness\" metric type and \"max\" metric addition, and compares the expected age to the actual age returned by the source.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 178,
            "num_tokens_output": 88,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "source_collector_test_case.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\source_collector_test_case.py)",
            "summary": "\nThis code is a base class for source collector unit tests. It sets up the necessary components for testing and provides methods for collecting metrics and asserting their attributes. It also includes methods for creating mock responses and setting source parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1387,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_collector.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\test_collector.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of unit tests for the Collector class. It includes mock objects, patches, and test cases for different scenarios such as source response measurement, multiple sources, multiple source types, parse errors, landing url errors, and default parameter values. It also includes a test for including entities in the measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1032,
            "num_tokens_output": 71,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\anchore\\base.py)",
            "summary": "\nThis code is a set of unit tests for the Anchore collectors, which are used to collect data from the Anchore source. It includes a base class for the unit tests and sets up fixtures for the tests.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 245,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\anchore\\test_security_warnings.py)",
            "summary": "\nThis code is a unit test for the Anchore security warnings collector. It includes functions for testing the number of security warnings and reading a zip file with reports.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 376,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\anchore\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Anchore source up-to-dateness collector, which checks the age of the source data. It imports necessary libraries and sets up test data. The tests check that the source age is returned and that a zip file with reports can be read.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 316,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\anchore_jenkins_plugin\\test_security_warnings.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Anchore Jenkins plugin security warnings collector. It imports necessary functions and sets up a test case. The test checks the number of security warnings and sets the source parameter for the severity level. It then creates a mock response and compares it to the expected entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 330,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\anchore_jenkins_plugin\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Anchore Jenkins plugin source up-to-dateness collector, which is a type of source collector. It imports necessary test cases and defines a test class for the Anchore Jenkins plugin source up-to-dateness collector. The source type for this collector is specified as \"anchore_jenkins_plugin\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 132,
            "num_tokens_output": 68,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\axe_core\\base.py)",
            "summary": "\nThe code is a base class for unit tests for the Axe-core report. It imports a test case and defines a class for testing Axe-core collectors. The source type is set to \"axe_core\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 75,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_accessibility.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\axe_core\\test_accessibility.py)",
            "summary": "\nThe code is a unit test for the Axe-core accessibility collector. It includes functions to set up test data, filter violations by impact level and tags, and process JSON files. It also tests for different result types and counts the number of issues.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1956,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\axe_core\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Axe-core source up-to-dateness collector, which checks the age of a source in days. It imports necessary modules and sets up test fixtures, then runs tests to ensure the correct age is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 311,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\axe_core\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the Axe-core source version collector, which checks the version of Axe-core being used. It includes two tests, one for a single version and one for a list of versions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 219,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_accessibility.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\axe_csv\\test_accessibility.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Axe accessibility collectors. It includes functions for setting up test data and testing various aspects of the collector, such as the number of violations, filtering by impact level, and processing zip archives. The code also includes tests for handling empty lines and embedded newlines in the data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1193,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_accessibility.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\axe_html_reporter\\test_accessibility.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Axe HTML reporter accessibility collector. It includes functions for reading and setting expected entities, testing for the number of issues, filtering by impact level and tags, and processing a zip archive with HTML files. It also tests for passed, inapplicable, and incomplete rules.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1416,
            "num_tokens_output": 69,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\base.py)",
            "summary": "\nThe code is a set of test cases for Azure DevOps unit tests, including base classes for testing collectors, jobs, and pipelines. It sets up fixtures and data for testing and includes expected entities for each test case.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1356,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_average_issue_lead_time.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_average_issue_lead_time.py)",
            "summary": "\nThis code is a set of unit tests for a metric collector that calculates the average lead time for issues in Azure DevOps Server. It includes fixtures, test cases, and assertions to ensure the accuracy of the metric calculation.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 737,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_failed_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_failed_jobs.py)",
            "summary": "\nThis code contains unit tests for the Azure DevOps Server failed jobs collectors. It includes a test for the number of failed jobs and tests for including and ignoring pipelines by status, name, and regular expression.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 299,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_issues.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_issues.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the Azure DevOps Server issues collector. It includes tests for the number of issues, zero issues, and empty issue responses, as well as tests for the use of the \"wiql\" parameter and the retrieval of issues.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 601,
            "num_tokens_output": 62,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_job_runs_within_time_period.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_job_runs_within_time_period.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Azure DevOps Server pipeline runs within a specified time period collector. It includes functions for testing pipeline runs, filtering by name, and counting pipeline runs based on a specified lookback period. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 875,
            "num_tokens_output": 54,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_merge_requests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_merge_requests.py)",
            "summary": "\nThe code is a unit test for the Azure DevOps merge requests collector. It imports necessary modules and sets up the test case. It also creates a fixture for the merge request and tests the functionality of the collector, including pagination.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 754,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Azure DevOps Server source up-to-dateness collector, including tests for the age of a file and a pipeline, as well as a test for when no file path or pipelines are specified. It uses the `collector_utilities.date_time` module and inherits from the `AzureDevopsTestCase` class. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 539,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_tests.py)",
            "summary": "\nThis code is a unit test for the Azure DevOps Server tests collector. It includes tests for the number of tests and the number of failed tests. The code uses a base class and sets various source parameters to collect data from the Azure DevOps server. It then asserts the collected data against expected values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1068,
            "num_tokens_output": 62,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_unmerged_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_unmerged_branches.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of unit tests for the Azure DevOps Server unmerged branches collector. It includes tests for different scenarios, such as when there are no unmerged branches or when there are unmerged branches with different timestamps. The code also includes a test for when the specified repository cannot be found. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 560,
            "num_tokens_output": 70,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_unused_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_unused_jobs.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of unit tests for the Azure DevOps Server unused jobs collectors. It includes tests for the number of unused jobs, pipelines that can be included and ignored, and unused jobs without a build date. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 301,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_user_story_points.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\azure_devops\\test_user_story_points.py)",
            "summary": "\nThe code is a unit test for the Azure DevOps Server user story points collector. It includes tests for the number of story points returned and for when there are no work items. The code uses a base class and asserts the measurement response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 224,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\bandit\\base.py)",
            "summary": "\nThe code is a base class for Bandit unit tests, which inherits from a source collector test case. It is used for testing Bandit collectors and specifies the source type as \"bandit\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 72,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\bandit\\test_security_warnings.py)",
            "summary": "\nThis code contains unit tests for the Bandit security warnings collector, including tests for the security warning metric and various scenarios such as high severity and high confidence warnings. It also includes tests for reading a zipped report and accessing a report in GitLab with a private token.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 685,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\bandit\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Bandit source up-to-dateness collector, which checks the age of the source code. It imports necessary modules and defines a test case class. The code then tests the source up-to-dateness metric by comparing the age of the source code to the current date and time.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 219,
            "num_tokens_output": 65,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\calendar\\base.py)",
            "summary": "\nThe code is a base class for calendar collector unit tests, which is used to test calendar collectors. It is a subclass of SourceCollectorTestCase and has a SOURCE_TYPE attribute set to \"calendar\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 68,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\calendar\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the calendar source up-to-dateness collector, which checks the number of days since a user-specified date. It includes tests for both a specified date and a default date.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 214,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_time_remaining.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\calendar\\test_time_remaining.py)",
            "summary": "\nThis code contains unit tests for a calendar time remaining collector, which uses the `datetime_fromparts` and `days_to_go` functions from the `collector_utilities.date_time` module. The tests include checking the number of days until a user-specified date and without a user-specified date. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 190,
            "num_tokens_output": 61,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cargo_audit\\test_security_warnings.py)",
            "summary": "\nThe code is a unit test for the Cargo Audit security warnings collector. It tests the number of security warnings and checks if the expected entities are returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 430,
            "num_tokens_output": 31,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_loc.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cloc\\test_loc.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the cloc LOC collector. It includes tests for the number of lines and languages returned, as well as the ability to ignore certain languages and include specific files. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 629,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cloc\\test_source_version.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the cloc source version collector. It includes a test case, a source collector test case, and a test for the source version. The test ensures that the source version is returned correctly.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 140,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura\\base.py)",
            "summary": "\nThis code is a base class for Cobertura unit tests and contains tests for Cobertura coverage collectors. It includes functions to test the number of uncovered lines and the total number of lines, as well as the ability to read a zipped report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 234,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Cobertura source up-to-dateness collector, which checks the age of a Cobertura report. It imports necessary modules and defines a class for the tests. The code also sets up a function to compute the expected age of the report and includes two tests to check the age of the report and the ability to read a zipped report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 305,
            "num_tokens_output": 76,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the Cobertura source version collector, which checks the source version of a code coverage report. It includes tests for retrieving the source version from a regular XML report and a zipped report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 226,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura\\test_uncovered_branches.py)",
            "summary": "\nThis code contains unit tests for the Cobertura uncovered branches collector, which is used to measure code coverage. It includes a CoberturaCoverageTestsMixin and CoberturaTestCase, and defines a Cobertura XML and metric type.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 109,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura\\test_uncovered_lines.py)",
            "summary": "\nThis code contains unit tests for the Cobertura uncovered lines collector, including a mixin and a test case. It also defines a Cobertura XML and a metric type.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 107,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura_jenkins_plugin\\base.py)",
            "summary": "\nThis code is a base class for unit tests for the Cobertura Jenkins plugin. It imports a test case class and defines a source type for the plugin.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 82,
            "num_tokens_output": 32,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura_jenkins_plugin\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Cobertura Jenkins plugin source up-to-dateness collector, using a mixin and a base class.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 123,
            "num_tokens_output": 28,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura_jenkins_plugin\\test_uncovered_branches.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Cobertura Jenkins plugin's uncovered branches collector. It includes a class for the test, a metric type, and a JSON dictionary for the plugin. The test ensures that the number of uncovered branches and the total number of branches are returned correctly.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 225,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cobertura_jenkins_plugin\\test_uncovered_lines.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Cobertura Jenkins plugin's uncovered lines collector. It includes a class for the test, a metric type, and a JSON dictionary for the plugin's results. The test ensures that the number of uncovered lines and the total number of lines are returned correctly.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 221,
            "num_tokens_output": 66,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\composer\\test_dependencies.py)",
            "summary": "\nThis code is a unit test for a Composer dependencies collector. It sets up test fixtures and tests the number of dependencies returned, as well as the ability to filter by status.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 517,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cxsast\\base.py)",
            "summary": "\nThis code is a base class for testing Checkmarx CxSAST collectors. It inherits from a SourceCollectorTestCase and sets up a CxSAST source fixture with project, username, and password parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 139,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cxsast\\test_security_warnings.py)",
            "summary": "\nThis code contains unit tests for the Checkmarx CxSAST security warnings collector, which checks for security warnings in a project. It includes a test for the number of warnings returned, and uses a mock response to simulate the API call.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 229,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cxsast\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Checkmarx CxSAST source up-to-dateness collector, which checks the age of the last finished scan. It uses the datetime and days_ago functions, and includes tests for both successful and failed connections to the source. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 379,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\cxsast\\test_source_version.py)",
            "summary": "\nThe code is a unit test for the Checkmarx CxSAST source version collector. It includes a test for the version of the source and uses a mock response to assert the measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 201,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gatling\\base.py)",
            "summary": "\nThe code delineated by the triple backticks is a base class for Gatling collectors. It includes a class for Gatling collector unit tests, as well as a dictionary and log for testing purposes.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 732,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_performancetest_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gatling\\test_performancetest_duration.py)",
            "summary": "\nThis code contains unit tests for the Gatling performance test duration collector, which is used to measure the duration of transactions in a log. It includes tests for scenarios where there are no transactions and where all transactions are present in the log.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 177,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gatling\\test_slow_transactions.py)",
            "summary": "\nThis code contains unit tests for the Gatling slow transactions collector, including tests for retrieving, ignoring, and including transactions, as well as evaluating different response times and setting transaction-specific target response times. It also includes tests for transforming API URLs that end with index.html to an URL that ends with js/stats.json.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 980,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gatling\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Gatling source-up-to-dateness collector, which is used to measure the age of a source. It imports necessary modules and defines a test case class. The code then tests for scenarios where there are no transactions and where there are transactions, and compares the expected age to the actual age.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 229,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gatling\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the Gatling source version collector, which is used to collect data on the source version of Gatling. The code includes a base class and two test cases, one for an empty file and one for a specific version. The tests ensure that the correct version is returned in each case.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 161,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gatling\\test_tests.py)",
            "summary": "\nThis code is a set of unit tests for a Gatling tests collector, which is used to retrieve and measure data from a JSON file. The tests cover various scenarios, such as when there are no transactions, when all samples are retrieved, when failed or successful samples are retrieved, and when transactions are ignored or included. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 408,
            "num_tokens_output": 66,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\generic_json\\test_security_warnings.py)",
            "summary": "\nThis code is a unit test for a Generic JSON security warnings collector. It tests the number of security warnings and compares it to the expected number of entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 257,
            "num_tokens_output": 32,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\base.py)",
            "summary": "\nThis code is a unit test base class for GitLab collectors, with a mixin for common tests. It sets up test fixtures and parameters, and tests the ability to ignore jobs by name or reference.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 612,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_failed_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_failed_jobs.py)",
            "summary": "\nThis code contains unit tests for the GitLab jobs collectors, including tests for the failed jobs metric, the number of failed jobs, ignoring previous runs of jobs, and using a private token.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 528,
            "num_tokens_output": 39,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_job_runs_within_time_period.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_job_runs_within_time_period.py)",
            "summary": "\nThe code is a unit test for a collector that collects data on GitLab job runs within a specified time period. It includes tests for verifying the lookback days and ensuring that job runs are not deduplicated.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 806,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_merge_requests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_merge_requests.py)",
            "summary": "\nThis code contains unit tests for the GitLab merge requests collector, including functions for creating merge requests and entities, and testing for pagination and approval filtering. It also includes a test for insufficient permissions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1574,
            "num_tokens_output": 40,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the GitLab source up-to-dateness collector, including tests for measuring the age of files, folders, and pipelines in a repository. It also includes tests for handling connection errors and setting the landing URL in case of failure.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 865,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the GitLab source version collector, which checks the version of GitLab and GitLab Enterprise Edition. It uses the `GitLabTestCase` class and has two tests for the regular and Enterprise Edition versions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 185,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_unmerged_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_unmerged_branches.py)",
            "summary": "\nThis code contains unit tests for the GitLab unmerged branches collector, which measures the number of unmerged branches in a project. It sets up fixtures and tests for pagination, and checks that the correct number of unmerged branches is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 607,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_unused_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\gitlab\\test_unused_jobs.py)",
            "summary": "\nThis code contains unit tests for the GitLab jobs collectors, including tests for the unused jobs metric and the use of a private token. The tests check that the correct number of unused jobs is returned and that the private token is used in the API call.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 227,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\harbor\\test_security_warnings.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Harbor security warnings collector. It includes tests for invalid credentials, no projects, no repositories, no artifacts, no scans, scan status not successful, scan overview with unknown report, scan without warnings, scan with warnings, pagination, and ignoring/including projects and repositories.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1525,
            "num_tokens_output": 69,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\harbor_json\\test_security_warnings.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Harbor JSON security warnings collector. It includes the necessary imports, test cases, and expected entities for the security warning metric. The code also tests the number of security warnings and their severity.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 777,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco\\base.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of base classes and mixins for JaCoCo coverage report collectors. It includes tests for common functionality and coverage collectors.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 378,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the JaCoCo source up-to-dateness collector, which checks the age of the source code. It imports necessary modules and sets up a common source for the tests. The code also includes tests for retrieving and reading a zipped report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 324,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco\\test_uncovered_branches.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the JaCoCo source. It includes a class for testing JaCoCo metrics, as well as a test for uncovered branches. The code uses a JaCoCo XML report to collect data and assert the measurement results.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 209,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco\\test_uncovered_lines.py)",
            "summary": "\nThis code contains unit tests for the JaCoCo source, including coverage tests and common tests. It also defines a JaCoCoUncoveredLinesTest class that tests the JaCoCo metrics, specifically the uncovered lines metric. The code also includes a JACOCO_XML variable that contains a report with information on the number of missed and covered lines.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 132,
            "num_tokens_output": 72,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco_jenkins_plugin\\base.py)",
            "summary": "\nThe code is a set of base classes used for unit testing the JaCoCo Jenkins plugin. It includes a source collector test case and a JaCoCo Jenkins plugin coverage base class. The source type is defined as \"jacoco_jenkins_plugin\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 83,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco_jenkins_plugin\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the JaCoCo Jenkins plugin source up-to-dateness collector, which is a mixin that is used in the JaCoCo Jenkins plugin test case.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 125,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco_jenkins_plugin\\test_uncovered_branches.py)",
            "summary": "\nThis code contains unit tests for the JaCoCo Jenkins plugin's uncovered branches collector, which checks the number of uncovered branches in a codebase. It includes a test case and a function to collect and assert the measurement values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 208,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jacoco_jenkins_plugin\\test_uncovered_lines.py)",
            "summary": "\nThis code contains unit tests for the JaCoCo Jenkins plugin's uncovered lines collector, which checks the number of lines that are not covered by tests. It includes a test case class, a metric type, and a test function that verifies the correct number of uncovered lines and total lines are returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 202,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins\\base.py)",
            "summary": "\nThis code contains base classes and a fixture for unit tests related to the Jenkins collector. It sets up a Jenkins instance with a build and defines parameters and URLs for testing.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 146,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_failed_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins\\test_failed_jobs.py)",
            "summary": "\nThis code contains unit tests for a Jenkins failed jobs collector, including tests for failed child jobs, failed jobs, included and ignored jobs, and no builds. It also includes functions for setting up Jenkins data and asserting measurements.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1142,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_job_runs_within_time_period.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins\\test_job_runs_within_time_period.py)",
            "summary": "\nThis code contains unit tests for a Jenkins job runs within time period collector. It imports the necessary modules and defines a test case class. The code also includes a test function to verify the build lookback days and a function to collect data from Jenkins. The expected entities and measurement are also defined in the code.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 319,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for a Jenkins source up-to-dateness collector, which checks the age of the last build and can ignore failed builds. It uses the JenkinsTestCase class and has tests for different scenarios, such as when the job has no builds or when failed builds are ignored. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 603,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the Jenkins source version collector, which checks the version of Jenkins being used. It inherits from a base class and defines the metric type and addition method. The test_version function checks that the version is correctly returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 129,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_unused_jobs.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins\\test_unused_jobs.py)",
            "summary": "\nThis code contains unit tests for the Jenkins unused jobs collector, which checks the number of unused jobs in a Jenkins instance. It includes two tests, one for the number of unused jobs and one for ignoring jobs without builds.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 256,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins_test_report\\base.py)",
            "summary": "\nThe code is a set of base classes used for unit testing Jenkins test reports. It imports a test case class and defines a base class for the test reports. The source type is also specified as \"jenkins_test_report\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 77,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins_test_report\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Jenkins test report source up-to-dateness collector, which checks the age of the source data. It imports necessary modules and defines a test case class. The code then tests the source age in days and the job age in days if the test report does not contain timestamps.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 315,
            "num_tokens_output": 63,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jenkins_test_report\\test_tests.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Jenkins test report tests collector. It includes tests for the number of tests, number of passed tests, and number of failed tests. The code also includes a test for an aggregated report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1051,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\base.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Jira metric source. It includes a base class for Jira unit tests, a function to create a Jira issue, and a function to create an entity. It also includes a function to get the collector's response, which uses a patch object to set the maximum number of results to 50.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 469,
            "num_tokens_output": 77,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_average_issue_lead_time.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_average_issue_lead_time.py)",
            "summary": "\nThe code is a set of unit tests for a Jira average issue lead time collector. It includes tests for the lead time of issues, excluding issues with certain status categories, and excluding issues without an updated field.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 434,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_issues.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_issues.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the Jira issues collector. It includes tests for retrieving issues, pagination, adding a private token to headers, and determining the maximum number of results from both an API call and a default value. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 650,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_issue_status.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_issue_status.py)",
            "summary": "\nThis code contains unit tests for the Jira issue status collector, including tests for various attributes such as issue name, created date, release, and sprint. It also includes tests for connection and parse errors.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1504,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_manual_test_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_manual_test_duration.py)",
            "summary": "\nThis code contains unit tests for the Jira manual test duration collector, which checks the duration of manual tests in Jira. It includes a test to ensure that the correct duration is returned and uses a mock response to simulate different test cases.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 188,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_manual_test_execution.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_manual_test_execution.py)",
            "summary": "\nThe code is a set of unit tests for a Jira manual test execution collector. It includes functions to test the number of test cases, the field name for the test frequency, and the optional field name.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 746,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_source_version.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Jira source version collector. It includes a test for the Jira version and uses a base class for the test case. The test checks that the correct version is returned and uses a specific metric type and addition.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 134,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_user_story_points.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_user_story_points.py)",
            "summary": "\nThe code is a unit test for the Jira user story points collector. It includes tests for the number of story points and the sprints associated with the user stories. The code uses a JiraTestCase class and asserts the measurement values and entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 379,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_velocity.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jira\\test_velocity.py)",
            "summary": "\nThis code contains unit tests for the Jira velocity collector, including tests for completed velocity, committed velocity, velocity difference, and missing boards. It also includes functions for creating entities and setting source parameters.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1301,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_csv\\base.py)",
            "summary": "\nThis code contains base classes and test cases for a JMeter CSV collector, including a source collector test case and a JMeter CSV test case. It also includes sample data for the JMeter CSV.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 440,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_performancetest_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_csv\\test_performancetest_duration.py)",
            "summary": "\nThe code is a unit test for the JMeter CSV performance test duration collector. It includes tests for the performance test duration of both no transactions and all transactions in the CSV.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 190,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_csv\\test_slow_transactions.py)",
            "summary": "\nThis code contains unit tests for the JMeter CSV slow transactions collector, including tests for different scenarios such as no transactions, all transactions, ignored transactions, and included transactions. It also tests for different response time types and transaction-specific target response times. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 841,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_csv\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for a JMeter CSV source-up-to-dateness collector. It imports necessary modules and defines a test case class. The code then tests for the age of the CSV source and checks for the expected age.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 242,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_csv\\test_tests.py)",
            "summary": "\nThis code contains unit tests for the JMeter CSV tests collector, including tests for retrieving all samples, failed samples, successful samples, ignoring transactions, and including transactions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 405,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_json\\base.py)",
            "summary": "\nThis code is a base class for JMeter JSON collectors and contains unit tests for the collector. It includes a dictionary of JMeter JSON data and defines various metrics for each transaction.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 385,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_json\\test_slow_transactions.py)",
            "summary": "\nThis code contains unit tests for the JMeter JSON slow transactions collector, including tests for retrieving all transactions, ignoring transactions, including transactions, evaluating different response times, and setting transaction-specific target response times.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 797,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\jmeter_json\\test_tests.py)",
            "summary": "\nThis code contains unit tests for the JMeter JSON tests collector, including tests for retrieving all samples, failed samples, successful samples, ignoring transactions, and including transactions.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 411,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\junit\\base.py)",
            "summary": "\nThis code contains base classes for JUnit XML test report collector unit tests, including a base class for JUnit collector unit tests and sample JUnit XML data.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 238,
            "num_tokens_output": 33,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\junit\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the JUnit XML test report source up-to-dateness collector. It imports necessary modules and defines a test case class. The code also includes two test methods, one for testing the source up-to-dateness and another for testing an empty test suites node.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 250,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\junit\\test_tests.py)",
            "summary": "\nThis code is a unit test for the JUnit XML test report tests collector. It includes tests for the number of tests, failed tests, and zipped JUnit reports. It also includes a test for an empty test suites node.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 544,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_all_metrics.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\manual_number\\test_all_metrics.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for a manual number source. It sets up a test case and tests the number of violations and percentage for the manual source.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 207,
            "num_tokens_output": 39,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\ncover\\base.py)",
            "summary": "\nThe code is a set of base classes used for unit testing the NCover collector. It imports a test case class and defines a base class for the collector. The source type is also specified as \"ncover\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 74,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\ncover\\test_source_up_to_dateness.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the NCover source. It imports necessary modules and defines a test case for the NCover source up-to-dateness collector. It also includes a test to check the age of the source in days.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 220,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\ncover\\test_uncovered_branches.py)",
            "summary": "\nThis code contains unit tests for the NCover uncovered branches collector, which is used to measure the number of uncovered branches in a codebase. It includes a class for the tests, a metric type, and two tests for different scenarios. The code also includes a script with JavaScript code for calculating the coverage points and covered points.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 287,
            "num_tokens_output": 66,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\ncover\\test_uncovered_lines.py)",
            "summary": "\nThis code contains unit tests for the NCover uncovered lines collector, which is used to measure the number of uncovered sequence points in a codebase. It includes a test for reading coverage from a zip file and a test for retrieving coverage from a website.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 292,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\npm\\test_dependencies.py)",
            "summary": "\nThis code is a unit test for the npm dependencies collector, which checks the number of dependencies in a project. It uses a test case class and includes a test to ensure the correct number of dependencies is returned. The code also includes sample data and expected results for the test.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 312,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\ojaudit\\test_violations.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the OJAudit violations collector. It includes tests for the number of violations, missing locations, filtered violations, and duplicated violations. The code also sets parameters and asserts measurements for the tests.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1480,
            "num_tokens_output": 53,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\openvas\\base.py)",
            "summary": "\nThis code contains base classes for unit tests of the OpenVAS collector, which is used to collect data from a specific source. It imports a test case class and defines a base class for the OpenVAS collector. The source type is also specified as \"openvas\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 76,
            "num_tokens_output": 54,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\openvas\\test_security_warnings.py)",
            "summary": "\nThis code contains unit tests for the OpenVAS security warnings collector, which checks for security vulnerabilities. It includes a test for the number of warnings returned and a test for filtering warnings by severity. The code also includes a sample XML report and expected entities for the tests.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 368,
            "num_tokens_output": 54,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\openvas\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the OpenVAS source up-to-dateness collector, which checks the age of a report in days. It imports necessary modules and defines a test case class. The code then tests the functionality of the collector by comparing the expected age to the actual age of the report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 285,
            "num_tokens_output": 61,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\openvas\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the OpenVAS source version collector, which checks the version of OpenVAS being used. It includes a test for the OpenVAS version and uses an XML report to retrieve the version number.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 170,
            "num_tokens_output": 44,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_dependency_check\\base.py)",
            "summary": "\nThis code is a set of base classes used for unit testing the OWASP dependency check collector. It includes a setup function and test data for a specific file and its associated vulnerabilities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 374,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_dependency_check\\test_dependencies.py)",
            "summary": "\nThe code is a unit test for the OWASP Dependency Check dependencies collector. It includes functions for testing the dependencies and ignoring parts of the file path. The code also includes expected entities for the test results.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 373,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_dependency_check\\test_security_warnings.py)",
            "summary": "\nThe code delineated by the triple backticks is a series of unit tests for the OWASP Dependency Check security warnings collector. It includes tests for different scenarios, such as different levels of warnings and invalid XML, and checks that the correct number of warnings is returned. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1113,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_dependency_check\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the OWASP Dependency Check source up-to-dateness collector. It imports necessary modules and defines a test case class. The code also includes a test to check the age of the source in days.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 207,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_dependency_check\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the OWASP Dependency Check source version collector, which checks the source version of a project. It inherits from a base class and defines a metric type. The code also includes a test to ensure that the correct version is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 125,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_zap\\base.py)",
            "summary": "\nThis code contains base classes for OWASP ZAP collector unit tests, which are used to test the OpenVAS collector. The SOURCE_TYPE variable is set to \"owasp_zap\".",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 80,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_zap\\test_security_warnings.py)",
            "summary": "\nThis code contains unit tests for the OWASP ZAP security warnings collector, which checks for security vulnerabilities in a website. It includes functions for calculating MD5 hashes and a base class for the tests. The code also includes tests for the number and types of alerts, as well as the ability to ignore certain parts of URLs. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1157,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_zap\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the OWASP ZAP source up-to-dateness collector, which checks the age of the source code. It imports necessary modules and defines a test case class. The code then tests the source age in days and compares it to the expected age.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 224,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\owasp_zap\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the OWASP ZAP source version collector, which checks the source version of the OWASP ZAP tool. It includes two tests that check the source version is returned correctly, one for the regular version and one for the weekly version.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 245,
            "num_tokens_output": 54,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\base.py)",
            "summary": "\nThis code contains base classes and a test case for the Performancetest-runner collector unit tests. It imports a test case and defines a source type for the collector.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 82,
            "num_tokens_output": 34,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_performancetest_duration.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_performancetest_duration.py)",
            "summary": "\nThis code contains unit tests for the Performancetest-runner performancetest duration source. It includes a test for the duration collector, which checks that the test duration is correctly returned. The code also specifies the metric type and addition, and uses a sample HTML response to test the functionality.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 177,
            "num_tokens_output": 58,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_performancetest_stability.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_performancetest_stability.py)",
            "summary": "\nThis code contains unit tests for the Performancetest-runner performance test stability collector. It includes a class for the stability test, which tests the percentage of the duration at which the performance test becomes unstable. The code also includes a function to collect data and a function to assert the measurement response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 197,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_scalability.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_scalability.py)",
            "summary": "\nThis code contains unit tests for the Performancetest-runner source, specifically for the performance test scalability collector. It tests the number of virtual users at which the ramp-up of throughput breaks and also tests the scalability without a breaking point.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 366,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_slow_transactions.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_slow_transactions.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of unit tests for the Performancetest-runner slow transactions collector. It includes tests for different scenarios, such as no transactions, one slow transaction, ignoring fast transactions, and counting only transactions that exceed a warning threshold. It also includes tests for ignoring and including transactions by name. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 853,
            "num_tokens_output": 69,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_software_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_software_version.py)",
            "summary": "\nThis code contains unit tests for the PerformanceTest-runner software version collector, which checks the version of the software being tested. It includes a test to ensure that the version is correctly returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 182,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Performancetest-runner source-up-to-dateness collector, which checks the age of a performance test. It imports necessary modules and defines a test case class. The code then tests the source up-to-dateness metric by checking the age of a test and comparing it to the expected value.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 250,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\performancetest_runner\\test_tests.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Performancetest-runner tests collector. It includes tests for the number of performance test transactions, failed transactions, succeeded transactions, ignored transactions, and included transactions. It also sets source parameters and asserts measurements for each test.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 591,
            "num_tokens_output": 59,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_dependencies.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\pip\\test_dependencies.py)",
            "summary": "\nThis code contains unit tests for a pip dependencies collector, which is used to collect data on dependencies. It includes a test to check the number of dependencies returned, and a response to ensure that the correct data is collected.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 294,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\pyupio_safety\\test_security_warnings.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Pyup.io Safety security warnings collector. It includes a test for the number of security warnings and defines the expected entities for the test.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 247,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\quality_time\\base.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of base classes for Quality-time collector unit tests. It includes a base class for Quality-time collector unit tests, sets up fixtures for Quality-time metrics unit tests, and overrides a method to pass the API and landing URLs.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 834,
            "num_tokens_output": 57,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_metrics.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\quality_time\\test_metrics.py)",
            "summary": "\nThis code is a set of unit tests for the Quality-time metrics collector. It includes tests for the number of metrics, metrics without reports, metrics with a recently changed status, and metrics without the correct report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 899,
            "num_tokens_output": 43,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_missing_metrics.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\quality_time\\test_missing_metrics.py)",
            "summary": "\nThe code is a unit test for the Quality-time missing metrics collector. It imports necessary libraries and sets up test data. It then tests for the number of missing metrics, the number of missing metrics without reports, and the number of missing metrics when filtered by name or UUID.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1002,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\quality_time\\test_source_up_to_dateness.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Quality-time source up-to-dateness collector. It includes functions for setting up test data and testing the source up-to-dateness of all reports and a specific report. The code also includes a function for asserting the measurement and overriding the API URLs.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 395,
            "num_tokens_output": 67,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\quality_time\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the Quality-time source version collector, which is used to measure the source version of the Quality-time software. The tests ensure that the source version can be accurately measured and provide a landing URL for further information.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 158,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework\\base.py)",
            "summary": "\nThis code contains base classes and test cases for collecting data from Robot Framework tests. It includes different versions of XML files with test results, including passing, failing, and skipped tests.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 621,
            "num_tokens_output": 37,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Robot Framework XML test report source, including a test for the source up-to-dateness metric. It uses the RobotFrameworkTestCase class and tests the source age in days by comparing it to a specific date.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 217,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework\\test_source_version.py)",
            "summary": "\nThis code contains unit tests for the Robot Framework source version collector, which tests the source version metric. It includes two tests, one for version 3 and one for version 4, which check that the correct version is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 187,
            "num_tokens_output": 47,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework\\test_tests.py)",
            "summary": "\nThis code contains unit tests for the Robot Framework tests collector, including tests for the number of tests, failed tests, and skipped tests. It also includes expected entities and a landing URL for each test.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 504,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework_jenkins_plugin\\base.py)",
            "summary": "\nThis code contains base classes for unit tests of the Robot Framework Jenkins plugin. It imports a test case class and defines a new class for coverage testing. The source type is also specified.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 83,
            "num_tokens_output": 38,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework_jenkins_plugin\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Robot Framework Jenkins plugin source up-to-dateness collector, using a mixin and a base class.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 123,
            "num_tokens_output": 28,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\robot_framework_jenkins_plugin\\test_tests.py)",
            "summary": "\nThis code contains unit tests for the Robot Framework Jenkins plugin tests collector, which includes functions for testing the number of tests, failed tests, and passed tests. The code also includes a class variable for the Jenkins JSON data and uses the \"assert_measurement\" function to compare the expected and actual values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 304,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sarif\\test_security_warnings.py)",
            "summary": "\nThe code is a unit test for a SARIF JSON security warnings collector. It includes tests for the number of security warnings and the warning levels. The code also defines expected entities and asserts the measurement response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 972,
            "num_tokens_output": 42,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\snyk\\test_security_warnings.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the Snyk security warnings collector. It includes tests for different scenarios, such as low severity warnings, minimum severity, multiple warnings, and warnings without indirect dependencies. The code also sets up the necessary parameters and expected entities for each test. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1121,
            "num_tokens_output": 64,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\base.py)",
            "summary": "\nThis code is a set of base classes and methods used for unit testing the SonarQube collector. It includes functions for creating entities and retrieving SonarQube rules.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 580,
            "num_tokens_output": 36,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_commented_out_code.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_commented_out_code.py)",
            "summary": "\nThis code contains unit tests for the SonarQube commented-out code collector, which checks for the number of lines with commented out code. It inherits from a base test case and includes a test to ensure the correct number of lines is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 180,
            "num_tokens_output": 50,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_complex_units.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_complex_units.py)",
            "summary": "\nThis code contains unit tests for the SonarQube complex units collector, which checks the number of complex units in a codebase. It uses a base class and a specific metric type, and tests that the correct number of complex units are returned. It also checks for the correct landing URL and rules.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 225,
            "num_tokens_output": 62,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_duplicated_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_duplicated_lines.py)",
            "summary": "\nThis code contains unit tests for the SonarQube duplicated lines collector, which checks for duplicated lines in code. It includes a test to ensure that the correct number of duplicated lines and total lines are returned, using a sample JSON response.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 204,
            "num_tokens_output": 49,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_loc.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_loc.py)",
            "summary": "\nThis code contains unit tests for the SonarQube LOC collector, which tests the number of lines of code in a project. It includes tests for returning the number of lines of non-comment code, all lines of code, and ignoring specific languages.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 562,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_long_units.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_long_units.py)",
            "summary": "\nThis code contains unit tests for the SonarQube long units collector, which tests the number of long units returned. It sets source parameters, collects data, and asserts the measurement values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 242,
            "num_tokens_output": 39,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_many_parameters.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_many_parameters.py)",
            "summary": "\nThis code contains unit tests for the SonarQube many parameters collector, which checks the number of functions with too many parameters. It sets source parameters, collects data, and asserts the measurement values.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 245,
            "num_tokens_output": 41,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_remediation_effort.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_remediation_effort.py)",
            "summary": "\nThis code contains unit tests for the SonarQube remediation effort collector, which tests the functionality of retrieving remediation effort data from the SonarQube platform. It includes tests for different scenarios and verifies that the correct data is returned. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 587,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_security_warnings.py)",
            "summary": "\nThis code contains unit tests for the SonarQube source, specifically for the security warnings collector. It sets up various URLs and parameters, and tests for the correct retrieval and filtering of security warnings and hotspots. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1787,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_software_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_software_version.py)",
            "summary": "\nThis code contains unit tests for the SonarQube software version collector, which checks the software version of a project. It includes a test to ensure that the correct version is returned and provides a landing URL for further information.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 181,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the SonarQube source up-to-dateness collector, which checks the number of days since the last analysis. It imports necessary modules and defines a test case class. The code also includes a test function and asserts the expected results.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 275,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_version.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_source_version.py)",
            "summary": "\nThe code delineated by the triple backticks is a unit test for the SonarQube source version collector. It includes a test for the SonarQube version number and uses a base class for the test case.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 154,
            "num_tokens_output": 46,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_suppressed_violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_suppressed_violations.py)",
            "summary": "\nThis code contains unit tests for the SonarQube suppressed violations collector. It includes tests for the number of suppressed violations, as well as tests for suppressed violations with rationales. The code also includes expected entities and a landing URL for the measurement.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 1073,
            "num_tokens_output": 51,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_tests.py)",
            "summary": "\nThis code contains unit tests for the SonarQube tests collector, which includes functions for testing the number of tests, skipped tests, and faulty components. It also extends the functionality to add a landing URL and throws an exception if there are no tests.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 468,
            "num_tokens_output": 52,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_todo_and_fixme_comments.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_todo_and_fixme_comments.py)",
            "summary": "\nThis code contains unit tests for the SonarQube todo and fixme comments collector, which checks for the number of todo and fixme comments in a codebase. It uses a base class and a specific metric type, and includes a test to ensure the correct number of comments is returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 189,
            "num_tokens_output": 60,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_branches.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_uncovered_branches.py)",
            "summary": "\nThis code contains unit tests for the SonarQube uncovered branches collector, which tests the number of uncovered branches and the number of branches to cover. It also includes a test for when the number of branches is missing, in which case it is assumed to be 0.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 305,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_uncovered_lines.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_uncovered_lines.py)",
            "summary": "\nThis code contains unit tests for the SonarQube uncovered lines collector, which checks the number of uncovered lines and lines to cover in a codebase. It uses a base class and a specific metric type, and includes a test to ensure the correct values are returned.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 213,
            "num_tokens_output": 55,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_violations.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\sonarqube\\test_violations.py)",
            "summary": "\nThis code contains unit tests for the SonarQube violations collector, including tests for the number of violations, major violations, multiple violation severities, and tags. It also sets up the expected entities and landing URL for each test.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 870,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\testng\\base.py)",
            "summary": "\nThe code is a base class for JUnit XML unit tests and TestNG collector unit tests. It imports a test case from a source collector and defines a source type.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 75,
            "num_tokens_output": 35,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\testng\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the JUnit XML test report source, including a test for the source up-to-dateness collector. It uses the `datetime` and `days_ago` functions from the `collector_utilities.date_time` module and inherits from the `TestNGCollectorTestCase` class. The `test_source_up_to_dateness` function tests that the source age in days is returned correctly.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 276,
            "num_tokens_output": 84,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_tests.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\testng\\test_tests.py)",
            "summary": "\nThis code contains unit tests for a JUnit XML tests collector, specifically for the TestNG XML tests collector. It includes a class for the tests, a metric type, and a TestNG XML file with test results. The code also has expected entities for the tests, and tests for the number of tests, failed tests, and a zipped TestNG report.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 724,
            "num_tokens_output": 74,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "base.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\trello\\base.py)",
            "summary": "\nThe code is a unit test for the Trello metric source, which includes setting up the Trello source and source data. It also includes a base class for testing Trello collectors and defines the source type as \"trello\". The code creates a set of cards and lists, and then compares them to a set of expected entities.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 508,
            "num_tokens_output": 68,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_issues.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\trello\\test_issues.py)",
            "summary": "\nThe code delineated by the triple backticks is a set of unit tests for the Trello issues collector. It includes tests for counting the number of issues and individual issues, ignoring certain lists, and counting specific types of issues. ",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 356,
            "num_tokens_output": 48,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_source_up_to_dateness.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\trello\\test_source_up_to_dateness.py)",
            "summary": "\nThis code contains unit tests for the Trello source up-to-dateness collector, which measures the number of days since the most recent change in a Trello source. It includes tests for the age and for ignoring certain lists when measuring the source up-to-dateness.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 257,
            "num_tokens_output": 56,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        },
        {
            "name": "test_security_warnings.py",
            "path": "(C:\\Users\\jeelb\\OneDrive - Stichting ICTU\\Documenten\\Code genAI\\quality-time\\components\\collector\\tests\\source_collectors\\trivy\\test_security_warnings.py)",
            "summary": "\nThe code is a unit test for the Trivy JSON security warnings collector. It includes a class for testing the security warning metric, a list of vulnerabilities, and two tests for the number of security warnings and warning levels.",
            "prompt_template": "\"\nWrite a concise summary for the code delineated by the triple backticks. \n\nCode: ```{code}```\n",
            "max_tokens": 128,
            "num_tokens_prompt": 953,
            "num_tokens_output": 45,
            "model": "gpt-3.5-turbo-instruct",
            "component": "collector"
        }
    ]
}